/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/action-menu/{conn_id}/close": {
    post: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ActionMenuModulesResult"];
        };
      };
    };
  };
  "/action-menu/{conn_id}/fetch": {
    post: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ActionMenuFetchResult"];
        };
      };
    };
  };
  "/action-menu/{conn_id}/perform": {
    post: {
      parameters: {
        body: {
          body?: definitions["PerformRequest"];
        };
        path: {
          /** Connection identifier */
          conn_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ActionMenuModulesResult"];
        };
      };
    };
  };
  "/action-menu/{conn_id}/request": {
    post: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ActionMenuModulesResult"];
        };
      };
    };
  };
  "/action-menu/{conn_id}/send-menu": {
    post: {
      parameters: {
        body: {
          body?: definitions["SendMenu"];
        };
        path: {
          /** Connection identifier */
          conn_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ActionMenuModulesResult"];
        };
      };
    };
  };
  "/connections": {
    get: {
      parameters: {
        query: {
          /** Alias */
          alias?: string;
          /** Connection protocol used */
          connection_protocol?: "connections/1.0" | "didexchange/1.0";
          /** invitation key */
          invitation_key?: string;
          /** My DID */
          my_did?: string;
          /** Connection state */
          state?:
            | "start"
            | "abandoned"
            | "active"
            | "completed"
            | "response"
            | "init"
            | "invitation"
            | "error"
            | "request";
          /** Their DID */
          their_did?: string;
          /** Their role in the connection protocol */
          their_role?: "invitee" | "requester" | "inviter" | "responder";
        };
      };
      responses: {
        200: {
          schema: definitions["ConnectionList"];
        };
      };
    };
  };
  "/connections/create-invitation": {
    post: {
      parameters: {
        body: {
          body?: definitions["CreateInvitationRequest"];
        };
        query: {
          /** Alias */
          alias?: string;
          /** Auto-accept connection (defaults to configuration) */
          auto_accept?: boolean;
          /** Create invitation for multiple use (default false) */
          multi_use?: boolean;
          /** Create invitation from public DID (default false) */
          public?: boolean;
        };
      };
      responses: {
        200: {
          schema: definitions["InvitationResult"];
        };
      };
    };
  };
  "/connections/create-static": {
    post: {
      parameters: {
        body: {
          body?: definitions["ConnectionStaticRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["ConnectionStaticResult"];
        };
      };
    };
  };
  "/connections/receive-invitation": {
    post: {
      parameters: {
        body: {
          body?: definitions["ReceiveInvitationRequest"];
        };
        query: {
          /** Alias */
          alias?: string;
          /** Auto-accept connection (defaults to configuration) */
          auto_accept?: boolean;
          /** Identifier for active mediation record to be used */
          mediation_id?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnRecord"];
        };
      };
    };
  };
  "/connections/{conn_id}": {
    get: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnRecord"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnectionModuleResponse"];
        };
      };
    };
  };
  "/connections/{conn_id}/accept-invitation": {
    post: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
        query: {
          /** Identifier for active mediation record to be used */
          mediation_id?: string;
          /** My URL endpoint */
          my_endpoint?: string;
          /** Label for connection */
          my_label?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnRecord"];
        };
      };
    };
  };
  "/connections/{conn_id}/accept-request": {
    post: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
        query: {
          /** My URL endpoint */
          my_endpoint?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnRecord"];
        };
      };
    };
  };
  "/connections/{conn_id}/endpoints": {
    get: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["EndpointsResult"];
        };
      };
    };
  };
  "/connections/{conn_id}/establish-inbound/{ref_id}": {
    post: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
          /** Inbound connection identifier */
          ref_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnectionModuleResponse"];
        };
      };
    };
  };
  "/connections/{conn_id}/metadata": {
    get: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
        query: {
          /** Key to retrieve. */
          key?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnectionMetadata"];
        };
      };
    };
    post: {
      parameters: {
        body: {
          body?: definitions["ConnectionMetadataSetRequest"];
        };
        path: {
          /** Connection identifier */
          conn_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnectionMetadata"];
        };
      };
    };
  };
  "/connections/{conn_id}/send-message": {
    post: {
      parameters: {
        body: {
          body?: definitions["SendMessage"];
        };
        path: {
          /** Connection identifier */
          conn_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["BasicMessageModuleResponse"];
        };
      };
    };
  };
  "/connections/{conn_id}/send-ping": {
    post: {
      parameters: {
        body: {
          body?: definitions["PingRequest"];
        };
        path: {
          /** Connection identifier */
          conn_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["PingRequestResponse"];
        };
      };
    };
  };
  "/connections/{conn_id}/start-introduction": {
    post: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
        query: {
          /** Target connection identifier */
          target_connection_id: string;
          /** Message */
          message?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["IntroModuleResponse"];
        };
      };
    };
  };
  "/credential-definitions": {
    post: {
      parameters: {
        body: {
          body?: definitions["CredentialDefinitionSendRequest"];
        };
        query: {
          /** Connection identifier */
          conn_id?: string;
          /** Create Transaction For Endorser's signature */
          create_transaction_for_endorser?: boolean;
        };
      };
      responses: {
        200: {
          schema: definitions["TxnOrCredentialDefinitionSendResult"];
        };
      };
    };
  };
  "/credential-definitions/created": {
    get: {
      parameters: {
        query: {
          /** Credential definition id */
          cred_def_id?: string;
          /** Issuer DID */
          issuer_did?: string;
          /** Schema identifier */
          schema_id?: string;
          /** Schema issuer DID */
          schema_issuer_did?: string;
          /** Schema name */
          schema_name?: string;
          /** Schema version */
          schema_version?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["CredentialDefinitionsCreatedResult"];
        };
      };
    };
  };
  "/credential-definitions/{cred_def_id}": {
    get: {
      parameters: {
        path: {
          /** Credential definition identifier */
          cred_def_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["CredentialDefinitionGetResult"];
        };
      };
    };
  };
  "/credential-definitions/{cred_def_id}/write_record": {
    post: {
      parameters: {
        path: {
          /** Credential definition identifier */
          cred_def_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["CredentialDefinitionGetResult"];
        };
      };
    };
  };
  "/credential/mime-types/{credential_id}": {
    get: {
      parameters: {
        path: {
          /** Credential identifier */
          credential_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["AttributeMimeTypesResult"];
        };
      };
    };
  };
  "/credential/revoked/{credential_id}": {
    get: {
      parameters: {
        path: {
          /** Credential identifier */
          credential_id: string;
        };
        query: {
          /** Earliest epoch of revocation status interval of interest */
          from?: string;
          /** Latest epoch of revocation status interval of interest */
          to?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["CredRevokedResult"];
        };
      };
    };
  };
  "/credential/w3c/{credential_id}": {
    get: {
      parameters: {
        path: {
          /** Credential identifier */
          credential_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["VCRecord"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** Credential identifier */
          credential_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["HolderModuleResponse"];
        };
      };
    };
  };
  "/credential/{credential_id}": {
    get: {
      parameters: {
        path: {
          /** Credential identifier */
          credential_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["IndyCredInfo"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** Credential identifier */
          credential_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["HolderModuleResponse"];
        };
      };
    };
  };
  "/credentials": {
    get: {
      parameters: {
        query: {
          /** Maximum number to retrieve */
          count?: string;
          /** Start index */
          start?: string;
          /** (JSON) WQL query */
          wql?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["CredInfoList"];
        };
      };
    };
  };
  "/credentials/w3c": {
    post: {
      parameters: {
        body: {
          body?: definitions["W3CCredentialsListRequest"];
        };
        query: {
          /** Maximum number to retrieve */
          count?: string;
          /** Start index */
          start?: string;
          /** (JSON) WQL query */
          wql?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["VCRecordList"];
        };
      };
    };
  };
  "/didexchange/create-request": {
    post: {
      parameters: {
        query: {
          /** Qualified public DID to which to request connection */
          their_public_did: string;
          /** Identifier for active mediation record to be used */
          mediation_id?: string;
          /** My URL endpoint */
          my_endpoint?: string;
          /** Label for connection request */
          my_label?: string;
          /** Use public DID for this connection */
          use_public_did?: boolean;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnRecord"];
        };
      };
    };
  };
  "/didexchange/receive-request": {
    post: {
      parameters: {
        body: {
          body?: definitions["DIDXRequest"];
        };
        query: {
          /** Alias for connection */
          alias?: string;
          /** Auto-accept connection (defaults to configuration) */
          auto_accept?: boolean;
          /** Identifier for active mediation record to be used */
          mediation_id?: string;
          /** My URL endpoint */
          my_endpoint?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnRecord"];
        };
      };
    };
  };
  "/didexchange/{conn_id}/accept-invitation": {
    post: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
        query: {
          /** My URL endpoint */
          my_endpoint?: string;
          /** Label for connection request */
          my_label?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnRecord"];
        };
      };
    };
  };
  "/didexchange/{conn_id}/accept-request": {
    post: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
        query: {
          /** Identifier for active mediation record to be used */
          mediation_id?: string;
          /** My URL endpoint */
          my_endpoint?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnRecord"];
        };
      };
    };
  };
  "/features": {
    get: {
      parameters: {
        query: {
          /** Query */
          query?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["QueryResult"];
        };
      };
    };
  };
  "/issue-credential-2.0/create": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20IssueCredSchemaCore"];
        };
      };
      responses: {
        200: {
          schema: definitions["V20CredExRecord"];
        };
      };
    };
  };
  "/issue-credential-2.0/create-offer": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20CredOfferConnFreeRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["V20CredExRecord"];
        };
      };
    };
  };
  "/issue-credential-2.0/records": {
    get: {
      parameters: {
        query: {
          /** Connection identifier */
          connection_id?: string;
          /** Role assigned in credential exchange */
          role?: "issuer" | "holder";
          /** Credential exchange state */
          state?:
            | "proposal-sent"
            | "proposal-received"
            | "offer-sent"
            | "offer-received"
            | "request-sent"
            | "request-received"
            | "credential-issued"
            | "credential-received"
            | "done";
          /** Thread identifier */
          thread_id?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20CredExRecordListResult"];
        };
      };
    };
  };
  "/issue-credential-2.0/records/{cred_ex_id}": {
    get: {
      parameters: {
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20CredExRecordDetail"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20IssueCredentialModuleResponse"];
        };
      };
    };
  };
  "/issue-credential-2.0/records/{cred_ex_id}/issue": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20CredIssueRequest"];
        };
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20CredExRecordDetail"];
        };
      };
    };
  };
  "/issue-credential-2.0/records/{cred_ex_id}/problem-report": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20CredIssueProblemReportRequest"];
        };
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20IssueCredentialModuleResponse"];
        };
      };
    };
  };
  "/issue-credential-2.0/records/{cred_ex_id}/send-offer": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20CredBoundOfferRequest"];
        };
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20CredExRecord"];
        };
      };
    };
  };
  "/issue-credential-2.0/records/{cred_ex_id}/send-request": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20CredRequestRequest"];
        };
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20CredExRecord"];
        };
      };
    };
  };
  "/issue-credential-2.0/records/{cred_ex_id}/store": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20CredStoreRequest"];
        };
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20CredExRecordDetail"];
        };
      };
    };
  };
  "/issue-credential-2.0/send": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20CredExFree"];
        };
      };
      responses: {
        200: {
          schema: definitions["V20CredExRecord"];
        };
      };
    };
  };
  "/issue-credential-2.0/send-offer": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20CredOfferRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["V20CredExRecord"];
        };
      };
    };
  };
  "/issue-credential-2.0/send-proposal": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20CredExFree"];
        };
      };
      responses: {
        200: {
          schema: definitions["V20CredExRecord"];
        };
      };
    };
  };
  "/issue-credential-2.0/send-request": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20CredRequestFree"];
        };
      };
      responses: {
        200: {
          schema: definitions["V20CredExRecord"];
        };
      };
    };
  };
  "/issue-credential/create": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10CredentialCreate"];
        };
      };
      responses: {
        200: {
          schema: definitions["V10CredentialExchange"];
        };
      };
    };
  };
  "/issue-credential/create-offer": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10CredentialConnFreeOfferRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["V10CredentialExchange"];
        };
      };
    };
  };
  "/issue-credential/records": {
    get: {
      parameters: {
        query: {
          /** Connection identifier */
          connection_id?: string;
          /** Role assigned in credential exchange */
          role?: "issuer" | "holder";
          /** Credential exchange state */
          state?:
            | "proposal_sent"
            | "proposal_received"
            | "offer_sent"
            | "offer_received"
            | "request_sent"
            | "request_received"
            | "credential_issued"
            | "credential_received"
            | "credential_acked";
          /** Thread identifier */
          thread_id?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10CredentialExchangeListResult"];
        };
      };
    };
  };
  "/issue-credential/records/{cred_ex_id}": {
    get: {
      parameters: {
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10CredentialExchange"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["IssueCredentialModuleResponse"];
        };
      };
    };
  };
  "/issue-credential/records/{cred_ex_id}/issue": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10CredentialIssueRequest"];
        };
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10CredentialExchange"];
        };
      };
    };
  };
  "/issue-credential/records/{cred_ex_id}/problem-report": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10CredentialProblemReportRequest"];
        };
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["IssueCredentialModuleResponse"];
        };
      };
    };
  };
  "/issue-credential/records/{cred_ex_id}/send-offer": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10CredentialBoundOfferRequest"];
        };
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10CredentialExchange"];
        };
      };
    };
  };
  "/issue-credential/records/{cred_ex_id}/send-request": {
    post: {
      parameters: {
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10CredentialExchange"];
        };
      };
    };
  };
  "/issue-credential/records/{cred_ex_id}/store": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10CredentialStoreRequest"];
        };
        path: {
          /** Credential exchange identifier */
          cred_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10CredentialExchange"];
        };
      };
    };
  };
  "/issue-credential/send": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10CredentialProposalRequestMand"];
        };
      };
      responses: {
        200: {
          schema: definitions["V10CredentialExchange"];
        };
      };
    };
  };
  "/issue-credential/send-offer": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10CredentialFreeOfferRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["V10CredentialExchange"];
        };
      };
    };
  };
  "/issue-credential/send-proposal": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10CredentialProposalRequestOpt"];
        };
      };
      responses: {
        200: {
          schema: definitions["V10CredentialExchange"];
        };
      };
    };
  };
  "/jsonld/sign": {
    post: {
      parameters: {
        body: {
          body?: definitions["SignRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["SignResponse"];
        };
      };
    };
  };
  "/jsonld/verify": {
    post: {
      parameters: {
        body: {
          body?: definitions["VerifyRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["VerifyResponse"];
        };
      };
    };
  };
  "/ledger/did-endpoint": {
    get: {
      parameters: {
        query: {
          /** DID of interest */
          did: string;
          /** Endpoint type of interest (default 'Endpoint') */
          endpoint_type?: "Endpoint" | "Profile" | "LinkedDomains";
        };
      };
      responses: {
        200: {
          schema: definitions["GetDIDEndpointResponse"];
        };
      };
    };
  };
  "/ledger/did-verkey": {
    get: {
      parameters: {
        query: {
          /** DID of interest */
          did: string;
        };
      };
      responses: {
        200: {
          schema: definitions["GetDIDVerkeyResponse"];
        };
      };
    };
  };
  "/ledger/get-nym-role": {
    get: {
      parameters: {
        query: {
          /** DID of interest */
          did: string;
        };
      };
      responses: {
        200: {
          schema: definitions["GetNymRoleResponse"];
        };
      };
    };
  };
  "/ledger/register-nym": {
    post: {
      parameters: {
        query: {
          /** DID to register */
          did: string;
          /** Verification key */
          verkey: string;
          /** Alias */
          alias?: string;
          /** Role */
          role?:
            | "STEWARD"
            | "TRUSTEE"
            | "ENDORSER"
            | "NETWORK_MONITOR"
            | "reset";
        };
      };
      responses: {
        200: {
          schema: definitions["RegisterLedgerNymResponse"];
        };
      };
    };
  };
  "/ledger/rotate-public-did-keypair": {
    patch: {
      parameters: {};
      responses: {
        200: {
          schema: definitions["LedgerModulesResult"];
        };
      };
    };
  };
  "/ledger/taa": {
    get: {
      parameters: {};
      responses: {
        200: {
          schema: definitions["TAAResult"];
        };
      };
    };
  };
  "/ledger/taa/accept": {
    post: {
      parameters: {
        body: {
          body?: definitions["TAAAccept"];
        };
      };
      responses: {
        200: {
          schema: definitions["LedgerModulesResult"];
        };
      };
    };
  };
  "/mediation/default-mediator": {
    get: {
      parameters: {};
      responses: {
        /** null */
        200: {
          schema: definitions["MediationRecord"];
        };
      };
    };
    delete: {
      parameters: {};
      responses: {
        /** null */
        201: {
          schema: definitions["MediationRecord"];
        };
      };
    };
  };
  "/mediation/keylists": {
    get: {
      parameters: {
        query: {
          /** Connection identifier (optional) */
          conn_id?: string;
          /** Filer on role, 'client' for keys         mediated by other agents, 'server' for keys         mediated by this agent */
          role?: "client" | "server";
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["Keylist"];
        };
      };
    };
  };
  "/mediation/keylists/{mediation_id}/send-keylist-query": {
    post: {
      parameters: {
        body: {
          body?: definitions["KeylistQueryFilterRequest"];
        };
        path: {
          /** Mediation record identifier */
          mediation_id: string;
        };
        query: {
          /** limit number of results */
          paginate_limit?: number;
          /** offset to use in pagination */
          paginate_offset?: number;
        };
      };
      responses: {
        /** null */
        201: {
          schema: definitions["KeylistQuery"];
        };
      };
    };
  };
  "/mediation/keylists/{mediation_id}/send-keylist-update": {
    post: {
      parameters: {
        body: {
          body?: definitions["KeylistUpdateRequest"];
        };
        path: {
          /** Mediation record identifier */
          mediation_id: string;
        };
      };
      responses: {
        /** null */
        201: {
          schema: definitions["KeylistUpdate"];
        };
      };
    };
  };
  "/mediation/request/{conn_id}": {
    post: {
      parameters: {
        body: {
          body?: definitions["MediationCreateRequest"];
        };
        path: {
          /** Connection identifier */
          conn_id: string;
        };
      };
      responses: {
        /** null */
        201: {
          schema: definitions["MediationRecord"];
        };
      };
    };
  };
  "/mediation/requests": {
    get: {
      parameters: {
        query: {
          /** Connection identifier (optional) */
          conn_id?: string;
          /** List of mediator rules for recipient */
          mediator_terms?: string[];
          /** List of recipient rules for mediation */
          recipient_terms?: string[];
          /** Mediation state (optional) */
          state?: "request" | "granted" | "denied";
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["MediationList"];
        };
      };
    };
  };
  "/mediation/requests/{mediation_id}": {
    get: {
      parameters: {
        path: {
          /** Mediation record identifier */
          mediation_id: string;
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["MediationRecord"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** Mediation record identifier */
          mediation_id: string;
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["MediationRecord"];
        };
      };
    };
  };
  "/mediation/requests/{mediation_id}/deny": {
    post: {
      parameters: {
        body: {
          body?: definitions["AdminMediationDeny"];
        };
        path: {
          /** Mediation record identifier */
          mediation_id: string;
        };
      };
      responses: {
        /** null */
        201: {
          schema: definitions["MediationDeny"];
        };
      };
    };
  };
  "/mediation/requests/{mediation_id}/grant": {
    post: {
      parameters: {
        path: {
          /** Mediation record identifier */
          mediation_id: string;
        };
      };
      responses: {
        /** null */
        201: {
          schema: definitions["MediationGrant"];
        };
      };
    };
  };
  "/mediation/{mediation_id}/default-mediator": {
    put: {
      parameters: {
        path: {
          /** Mediation record identifier */
          mediation_id: string;
        };
      };
      responses: {
        /** null */
        201: {
          schema: definitions["MediationRecord"];
        };
      };
    };
  };
  "/multitenancy/wallet": {
    post: {
      parameters: {
        body: {
          body?: definitions["CreateWalletRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["CreateWalletResponse"];
        };
      };
    };
  };
  "/multitenancy/wallet/{wallet_id}": {
    get: {
      parameters: {
        path: {
          /** Subwallet identifier */
          wallet_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["WalletRecord"];
        };
      };
    };
    put: {
      parameters: {
        body: {
          body?: definitions["UpdateWalletRequest"];
        };
        path: {
          /** Subwallet identifier */
          wallet_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["WalletRecord"];
        };
      };
    };
  };
  "/multitenancy/wallet/{wallet_id}/remove": {
    post: {
      parameters: {
        body: {
          body?: definitions["RemoveWalletRequest"];
        };
        path: {
          /** Subwallet identifier */
          wallet_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["MultitenantModuleResponse"];
        };
      };
    };
  };
  "/multitenancy/wallet/{wallet_id}/token": {
    post: {
      parameters: {
        body: {
          body?: definitions["CreateWalletTokenRequest"];
        };
        path: {
          wallet_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["CreateWalletTokenResponse"];
        };
      };
    };
  };
  "/multitenancy/wallets": {
    get: {
      parameters: {
        query: {
          /** Wallet name */
          wallet_name?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["WalletList"];
        };
      };
    };
  };
  "/out-of-band/create-invitation": {
    post: {
      parameters: {
        body: {
          body?: definitions["InvitationCreateRequest"];
        };
        query: {
          /** Auto-accept connection (defaults to configuration) */
          auto_accept?: boolean;
          /** Create invitation for multiple use (default false) */
          multi_use?: boolean;
        };
      };
      responses: {
        200: {
          schema: definitions["InvitationRecord"];
        };
      };
    };
  };
  "/out-of-band/receive-invitation": {
    post: {
      parameters: {
        body: {
          body?: definitions["InvitationMessage"];
        };
        query: {
          /** Alias for connection */
          alias?: string;
          /** Auto-accept connection (defaults to configuration) */
          auto_accept?: boolean;
          /** Identifier for active mediation record to be used */
          mediation_id?: string;
          /** Use an existing connection, if possible */
          use_existing_connection?: boolean;
        };
      };
      responses: {
        200: {
          schema: definitions["ConnRecord"];
        };
      };
    };
  };
  "/plugins": {
    get: {
      parameters: {};
      responses: {
        200: {
          schema: definitions["AdminModules"];
        };
      };
    };
  };
  "/present-proof-2.0/create-request": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20PresCreateRequestRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["V20PresExRecord"];
        };
      };
    };
  };
  "/present-proof-2.0/records": {
    get: {
      parameters: {
        query: {
          /** Connection identifier */
          connection_id?: string;
          /** Role assigned in presentation exchange */
          role?: "prover" | "verifier";
          /** Presentation exchange state */
          state?:
            | "proposal-sent"
            | "proposal-received"
            | "request-sent"
            | "request-received"
            | "presentation-sent"
            | "presentation-received"
            | "done"
            | "abandoned";
          /** Thread identifier */
          thread_id?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20PresExRecordList"];
        };
      };
    };
  };
  "/present-proof-2.0/records/{pres_ex_id}": {
    get: {
      parameters: {
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20PresExRecord"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20PresentProofModuleResponse"];
        };
      };
    };
  };
  "/present-proof-2.0/records/{pres_ex_id}/credentials": {
    get: {
      parameters: {
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
        query: {
          /** Maximum number to retrieve */
          count?: string;
          /** (JSON) object mapping referents to extra WQL queries */
          extra_query?: string;
          /** Proof request referents of interest, comma-separated */
          referent?: string;
          /** Start index */
          start?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["IndyCredPrecis"][];
        };
      };
    };
  };
  "/present-proof-2.0/records/{pres_ex_id}/problem-report": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20PresProblemReportRequest"];
        };
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20PresentProofModuleResponse"];
        };
      };
    };
  };
  "/present-proof-2.0/records/{pres_ex_id}/send-presentation": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20PresSpecByFormatRequest"];
        };
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20PresExRecord"];
        };
      };
    };
  };
  "/present-proof-2.0/records/{pres_ex_id}/send-request": {
    post: {
      parameters: {
        body: {
          body?: definitions["AdminAPIMessageTracing"];
        };
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20PresExRecord"];
        };
      };
    };
  };
  "/present-proof-2.0/records/{pres_ex_id}/verify-presentation": {
    post: {
      parameters: {
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V20PresExRecord"];
        };
      };
    };
  };
  "/present-proof-2.0/send-proposal": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20PresProposalRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["V20PresExRecord"];
        };
      };
    };
  };
  "/present-proof-2.0/send-request": {
    post: {
      parameters: {
        body: {
          body?: definitions["V20PresSendRequestRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["V20PresExRecord"];
        };
      };
    };
  };
  "/present-proof/create-request": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10PresentationCreateRequestRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["V10PresentationExchange"];
        };
      };
    };
  };
  "/present-proof/records": {
    get: {
      parameters: {
        query: {
          /** Connection identifier */
          connection_id?: string;
          /** Role assigned in presentation exchange */
          role?: "prover" | "verifier";
          /** Presentation exchange state */
          state?:
            | "proposal_sent"
            | "proposal_received"
            | "request_sent"
            | "request_received"
            | "presentation_sent"
            | "presentation_received"
            | "verified"
            | "presentation_acked";
          /** Thread identifier */
          thread_id?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10PresentationExchangeList"];
        };
      };
    };
  };
  "/present-proof/records/{pres_ex_id}": {
    get: {
      parameters: {
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10PresentationExchange"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10PresentProofModuleResponse"];
        };
      };
    };
  };
  "/present-proof/records/{pres_ex_id}/credentials": {
    get: {
      parameters: {
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
        query: {
          /** Maximum number to retrieve */
          count?: string;
          /** (JSON) object mapping referents to extra WQL queries */
          extra_query?: string;
          /** Proof request referents of interest, comma-separated */
          referent?: string;
          /** Start index */
          start?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["IndyCredPrecis"][];
        };
      };
    };
  };
  "/present-proof/records/{pres_ex_id}/problem-report": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10PresentationProblemReportRequest"];
        };
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10PresentProofModuleResponse"];
        };
      };
    };
  };
  "/present-proof/records/{pres_ex_id}/send-presentation": {
    post: {
      parameters: {
        body: {
          body?: definitions["IndyPresSpec"];
        };
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10PresentationExchange"];
        };
      };
    };
  };
  "/present-proof/records/{pres_ex_id}/send-request": {
    post: {
      parameters: {
        body: {
          body?: definitions["AdminAPIMessageTracing"];
        };
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10PresentationExchange"];
        };
      };
    };
  };
  "/present-proof/records/{pres_ex_id}/verify-presentation": {
    post: {
      parameters: {
        path: {
          /** Presentation exchange identifier */
          pres_ex_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["V10PresentationExchange"];
        };
      };
    };
  };
  "/present-proof/send-proposal": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10PresentationProposalRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["V10PresentationExchange"];
        };
      };
    };
  };
  "/present-proof/send-request": {
    post: {
      parameters: {
        body: {
          body?: definitions["V10PresentationSendRequestRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["V10PresentationExchange"];
        };
      };
    };
  };
  "/resolver/resolve/{did}": {
    get: {
      parameters: {
        path: {
          /** DID */
          did: string;
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["ResolutionResult"];
        };
      };
    };
  };
  "/revocation/active-registry/{cred_def_id}": {
    get: {
      parameters: {
        path: {
          /** Credential definition identifier */
          cred_def_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["RevRegResult"];
        };
      };
    };
  };
  "/revocation/clear-pending-revocations": {
    post: {
      parameters: {
        body: {
          body?: definitions["ClearPendingRevocationsRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["PublishRevocations"];
        };
      };
    };
  };
  "/revocation/create-registry": {
    post: {
      parameters: {
        body: {
          body?: definitions["RevRegCreateRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["RevRegResult"];
        };
      };
    };
  };
  "/revocation/credential-record": {
    get: {
      parameters: {
        query: {
          /** Credential exchange identifier */
          cred_ex_id?: string;
          /** Credential revocation identifier */
          cred_rev_id?: string;
          /** Revocation registry identifier */
          rev_reg_id?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["CredRevRecordResult"];
        };
      };
    };
  };
  "/revocation/publish-revocations": {
    post: {
      parameters: {
        body: {
          body?: definitions["PublishRevocations"];
        };
        query: {
          /** Connection identifier */
          conn_id?: string;
          /** Create Transaction For Endorser's signature */
          create_transaction_for_endorser?: boolean;
        };
      };
      responses: {
        200: {
          schema: definitions["TxnOrPublishRevocationsResult"];
        };
      };
    };
  };
  "/revocation/registries/created": {
    get: {
      parameters: {
        query: {
          /** Credential definition identifier */
          cred_def_id?: string;
          /** Revocation registry state */
          state?: "init" | "generated" | "posted" | "active" | "full";
        };
      };
      responses: {
        200: {
          schema: definitions["RevRegsCreated"];
        };
      };
    };
  };
  "/revocation/registry/{rev_reg_id}": {
    get: {
      parameters: {
        path: {
          /** Revocation Registry identifier */
          rev_reg_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["RevRegResult"];
        };
      };
    };
    patch: {
      parameters: {
        body: {
          body?: definitions["RevRegUpdateTailsFileUri"];
        };
        path: {
          /** Revocation Registry identifier */
          rev_reg_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["RevRegResult"];
        };
      };
    };
  };
  "/revocation/registry/{rev_reg_id}/definition": {
    post: {
      parameters: {
        path: {
          /** Revocation Registry identifier */
          rev_reg_id: string;
        };
        query: {
          /** Connection identifier */
          conn_id?: string;
          /** Create Transaction For Endorser's signature */
          create_transaction_for_endorser?: boolean;
        };
      };
      responses: {
        200: {
          schema: definitions["TxnOrRevRegResult"];
        };
      };
    };
  };
  "/revocation/registry/{rev_reg_id}/entry": {
    post: {
      parameters: {
        path: {
          /** Revocation Registry identifier */
          rev_reg_id: string;
        };
        query: {
          /** Connection identifier */
          conn_id?: string;
          /** Create Transaction For Endorser's signature */
          create_transaction_for_endorser?: boolean;
        };
      };
      responses: {
        200: {
          schema: definitions["RevRegResult"];
        };
      };
    };
  };
  "/revocation/registry/{rev_reg_id}/issued": {
    get: {
      parameters: {
        path: {
          /** Revocation Registry identifier */
          rev_reg_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["RevRegIssuedResult"];
        };
      };
    };
  };
  "/revocation/registry/{rev_reg_id}/set-state": {
    patch: {
      parameters: {
        path: {
          /** Revocation Registry identifier */
          rev_reg_id: string;
        };
        query: {
          /** Revocation registry state to set */
          state: "init" | "generated" | "posted" | "active" | "full";
        };
      };
      responses: {
        200: {
          schema: definitions["RevRegResult"];
        };
      };
    };
  };
  "/revocation/registry/{rev_reg_id}/tails-file": {
    get: {
      parameters: {
        path: {
          /** Revocation Registry identifier */
          rev_reg_id: string;
        };
      };
      responses: {
        /** tails file */
        200: {
          schema: string;
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** Revocation Registry identifier */
          rev_reg_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["RevocationModuleResponse"];
        };
      };
    };
  };
  "/revocation/revoke": {
    post: {
      parameters: {
        body: {
          body?: definitions["RevokeRequest"];
        };
      };
      responses: {
        200: {
          schema: definitions["RevocationModuleResponse"];
        };
      };
    };
  };
  "/schemas": {
    post: {
      parameters: {
        body: {
          body?: definitions["SchemaSendRequest"];
        };
        query: {
          /** Connection identifier */
          conn_id?: string;
          /** Create Transaction For Endorser's signature */
          create_transaction_for_endorser?: boolean;
        };
      };
      responses: {
        200: {
          schema: definitions["TxnOrSchemaSendResult"];
        };
      };
    };
  };
  "/schemas/created": {
    get: {
      parameters: {
        query: {
          /** Schema identifier */
          schema_id?: string;
          /** Schema issuer DID */
          schema_issuer_did?: string;
          /** Schema name */
          schema_name?: string;
          /** Schema version */
          schema_version?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["SchemasCreatedResult"];
        };
      };
    };
  };
  "/schemas/{schema_id}": {
    get: {
      parameters: {
        path: {
          /** Schema identifier */
          schema_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["SchemaGetResult"];
        };
      };
    };
  };
  "/schemas/{schema_id}/write_record": {
    post: {
      parameters: {
        path: {
          /** Schema identifier */
          schema_id: string;
        };
      };
      responses: {
        200: {
          schema: definitions["SchemaGetResult"];
        };
      };
    };
  };
  "/shutdown": {
    get: {
      parameters: {};
      responses: {
        200: {
          schema: definitions["AdminShutdown"];
        };
      };
    };
  };
  "/status": {
    get: {
      parameters: {};
      responses: {
        200: {
          schema: definitions["AdminStatus"];
        };
      };
    };
  };
  "/status/config": {
    get: {
      parameters: {};
      responses: {
        200: {
          schema: definitions["AdminConfig"];
        };
      };
    };
  };
  "/status/live": {
    get: {
      parameters: {};
      responses: {
        200: {
          schema: definitions["AdminStatusLiveliness"];
        };
      };
    };
  };
  "/status/ready": {
    get: {
      parameters: {};
      responses: {
        200: {
          schema: definitions["AdminStatusReadiness"];
        };
      };
    };
  };
  "/status/reset": {
    post: {
      parameters: {};
      responses: {
        200: {
          schema: definitions["AdminReset"];
        };
      };
    };
  };
  "/transaction/{tran_id}/resend": {
    post: {
      parameters: {
        path: {
          /** Transaction identifier */
          tran_id: string;
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["TransactionRecord"];
        };
      };
    };
  };
  "/transactions": {
    get: {
      parameters: {};
      responses: {
        /** null */
        200: {
          schema: definitions["TransactionList"];
        };
      };
    };
  };
  "/transactions/create-request": {
    post: {
      parameters: {
        body: {
          body?: definitions["Date"];
        };
        query: {
          /** Transaction identifier */
          tran_id: string;
          /** Endorser will write the transaction after endorsing it */
          endorser_write_txn?: boolean;
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["TransactionRecord"];
        };
      };
    };
  };
  "/transactions/{conn_id}/set-endorser-info": {
    post: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
        query: {
          /** Endorser DID */
          endorser_did: string;
          /** Endorser Name */
          endorser_name?: string;
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["EndorserInfo"];
        };
      };
    };
  };
  "/transactions/{conn_id}/set-endorser-role": {
    post: {
      parameters: {
        path: {
          /** Connection identifier */
          conn_id: string;
        };
        query: {
          /** Transaction related jobs */
          transaction_my_job?:
            | "TRANSACTION_AUTHOR"
            | "TRANSACTION_ENDORSER"
            | "reset";
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["TransactionJobs"];
        };
      };
    };
  };
  "/transactions/{tran_id}": {
    get: {
      parameters: {
        path: {
          /** Transaction identifier */
          tran_id: string;
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["TransactionRecord"];
        };
      };
    };
  };
  "/transactions/{tran_id}/cancel": {
    post: {
      parameters: {
        path: {
          /** Transaction identifier */
          tran_id: string;
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["TransactionRecord"];
        };
      };
    };
  };
  "/transactions/{tran_id}/endorse": {
    post: {
      parameters: {
        path: {
          /** Transaction identifier */
          tran_id: string;
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["TransactionRecord"];
        };
      };
    };
  };
  "/transactions/{tran_id}/refuse": {
    post: {
      parameters: {
        path: {
          /** Transaction identifier */
          tran_id: string;
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["TransactionRecord"];
        };
      };
    };
  };
  "/transactions/{tran_id}/write": {
    post: {
      parameters: {
        path: {
          /** Transaction identifier */
          tran_id: string;
        };
      };
      responses: {
        /** null */
        200: {
          schema: definitions["TransactionRecord"];
        };
      };
    };
  };
  "/wallet/did": {
    get: {
      parameters: {
        query: {
          /** DID of interest */
          did?: string;
          /** Key type to query for. */
          key_type?: "ed25519" | "bls12381g2";
          /** DID method to query for. e.g. sov to only fetch indy/sov DIDs */
          method?: "key" | "sov";
          /** Whether DID is current public DID, posted to ledger but current public DID, or local to the wallet */
          posture?: "public" | "posted" | "wallet_only";
          /** Verification key of interest */
          verkey?: string;
        };
      };
      responses: {
        200: {
          schema: definitions["DIDList"];
        };
      };
    };
  };
  "/wallet/did/create": {
    post: {
      parameters: {
        body: {
          body?: definitions["DIDCreate"];
        };
      };
      responses: {
        200: {
          schema: definitions["DIDResult"];
        };
      };
    };
  };
  "/wallet/did/local/rotate-keypair": {
    patch: {
      parameters: {
        query: {
          /** DID of interest */
          did: string;
        };
      };
      responses: {
        200: {
          schema: definitions["WalletModuleResponse"];
        };
      };
    };
  };
  "/wallet/did/public": {
    get: {
      parameters: {};
      responses: {
        200: {
          schema: definitions["DIDResult"];
        };
      };
    };
    post: {
      parameters: {
        query: {
          /** DID of interest */
          did: string;
        };
      };
      responses: {
        200: {
          schema: definitions["DIDResult"];
        };
      };
    };
  };
  "/wallet/get-did-endpoint": {
    get: {
      parameters: {
        query: {
          /** DID of interest */
          did: string;
        };
      };
      responses: {
        200: {
          schema: definitions["DIDEndpoint"];
        };
      };
    };
  };
  "/wallet/set-did-endpoint": {
    post: {
      parameters: {
        body: {
          body?: definitions["DIDEndpointWithType"];
        };
      };
      responses: {
        200: {
          schema: definitions["WalletModuleResponse"];
        };
      };
    };
  };
}

export interface definitions {
  AMLRecord: {
    aml?: { [key: string]: string };
    amlContext?: string;
    version?: string;
  };
  ActionMenuFetchResult: {
    result?: definitions["ActionMenuFetchResult_result"];
  };
  ActionMenuModulesResult: { [key: string]: unknown };
  AdminAPIMessageTracing: {
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
  };
  AdminConfig: {
    /** @description Configuration settings */
    config?: { [key: string]: unknown };
  };
  AdminMediationDeny: {
    /** @description List of mediator rules for recipient */
    mediator_terms?: string[];
    /** @description List of recipient rules for mediation */
    recipient_terms?: string[];
  };
  AdminModules: {
    /** @description List of admin modules */
    result?: string[];
  };
  AdminReset: { [key: string]: unknown };
  AdminShutdown: { [key: string]: unknown };
  AdminStatus: {
    /** @description Conductor statistics */
    conductor?: { [key: string]: unknown };
    /** @description Default label */
    label?: string;
    /** @description Timing results */
    timing?: { [key: string]: unknown };
    /** @description Version code */
    version?: string;
  };
  AdminStatusLiveliness: {
    /**
     * @description Liveliness status
     * @example true
     */
    alive?: boolean;
  };
  AdminStatusReadiness: {
    /**
     * @description Readiness status
     * @example true
     */
    ready?: boolean;
  };
  AttachDecorator: {
    /**
     * @description Attachment identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * Format: int32
     * @description Byte count of data included by reference
     * @example 1234
     */
    byte_count?: number;
    data: definitions["AttachDecoratorData"];
    /**
     * @description Human-readable description of content
     * @example view from doorway, facing east, with lights off
     */
    description?: string;
    /**
     * @description File name
     * @example IMG1092348.png
     */
    filename?: string;
    /**
     * @description Hint regarding last modification datetime, in ISO-8601 format
     * @example 2021-12-31 23:59:59Z
     */
    lastmod_time?: string;
    /**
     * @description MIME type
     * @example image/png
     */
    "mime-type"?: string;
  };
  AttachDecoratorData: {
    /**
     * @description Base64-encoded data
     * @example ey4uLn0=
     */
    base64?: string;
    /**
     * @description JSON-serialized data
     * @example {"sample": "content"}
     */
    json?: { [key: string]: unknown };
    jws?: definitions["AttachDecoratorData_jws"];
    /** @description List of hypertext links to data */
    links?: string[];
    /**
     * @description SHA256 hash (binhex encoded) of content
     * @example 617a48c7c8afe0521efdc03e5bb0ad9e655893e6b4b51f0e794d70fba132aacb
     */
    sha256?: string;
  };
  AttachDecoratorData1JWS: {
    header: definitions["AttachDecoratorDataJWSHeader"];
    /**
     * @description protected JWS header
     * @example ey4uLn0
     */
    protected?: string;
    /**
     * @description signature
     * @example ey4uLn0
     */
    signature: string;
  };
  AttachDecoratorDataJWS: {
    header?: definitions["AttachDecoratorDataJWSHeader"];
    /**
     * @description protected JWS header
     * @example ey4uLn0
     */
    protected?: string;
    /**
     * @description signature
     * @example ey4uLn0
     */
    signature?: string;
    /** @description List of signatures */
    signatures?: definitions["AttachDecoratorData1JWS"][];
  };
  AttachDecoratorDataJWSHeader: {
    /**
     * @description Key identifier, in W3C did:key or DID URL format
     * @example did:sov:LjgpST2rjsoxYegQDRm7EL#keys-4
     */
    kid: string;
  };
  AttachmentDef: {
    /**
     * @description Attachment identifier
     * @example attachment-0
     */
    id?: string;
    /**
     * @description Attachment type
     * @example present-proof
     * @enum {string}
     */
    type?: "credential-offer" | "present-proof";
  };
  AttributeMimeTypesResult: {
    results?: { [key: string]: string };
  };
  BasicMessageModuleResponse: { [key: string]: unknown };
  ClaimFormat: {
    jwt?: { [key: string]: unknown };
    jwt_vc?: { [key: string]: unknown };
    jwt_vp?: { [key: string]: unknown };
    ldp?: { [key: string]: unknown };
    ldp_vc?: { [key: string]: unknown };
    ldp_vp?: { [key: string]: unknown };
  };
  ClearPendingRevocationsRequest: {
    /** @description Credential revocation ids by revocation registry id: omit for all, specify null or empty list for all pending per revocation registry */
    purge?: { [key: string]: string[] };
  };
  ConnRecord: {
    /**
     * @description Connection acceptance: manual or auto
     * @example auto
     * @enum {string}
     */
    accept?: "manual" | "auto";
    /**
     * @description Optional alias to apply to connection for later use
     * @example Bob, providing quotes
     */
    alias?: string;
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id?: string;
    /**
     * @description Connection protocol used
     * @example connections/1.0
     * @enum {string}
     */
    connection_protocol?: "connections/1.0" | "didexchange/1.0";
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    /**
     * @description Error message
     * @example No DIDDoc provided; cannot connect to public DID
     */
    error_msg?: string;
    /**
     * @description Inbound routing connection id to use
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    inbound_connection_id?: string;
    /**
     * @description Public key for connection
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    invitation_key?: string;
    /**
     * @description Invitation mode
     * @example once
     * @enum {string}
     */
    invitation_mode?: "once" | "multi" | "static";
    /**
     * @description ID of out-of-band invitation message
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    invitation_msg_id?: string;
    /**
     * @description Our DID for connection
     * @example WgWxqztrNooG92RXvxSTWv
     */
    my_did?: string;
    /**
     * @description Connection request identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    request_id?: string;
    /**
     * @description State per RFC 23
     * @example invitation-sent
     */
    rfc23_state?: string;
    /**
     * @description Routing state of connection
     * @example active
     * @enum {string}
     */
    routing_state?: "none" | "request" | "active" | "error";
    /**
     * @description Current record state
     * @example active
     */
    state?: string;
    /**
     * @description Their DID for connection
     * @example WgWxqztrNooG92RXvxSTWv
     */
    their_did?: string;
    /**
     * @description Their label for connection
     * @example Bob
     */
    their_label?: string;
    /**
     * @description Other agent's public DID for connection
     * @example 2cpBmR3FqGKWi5EyUbpRY8
     */
    their_public_did?: string;
    /**
     * @description Their role in the connection protocol
     * @example requester
     * @enum {string}
     */
    their_role?: "invitee" | "requester" | "inviter" | "responder";
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
  };
  ConnectionInvitation: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /**
     * @description DID for connection invitation
     * @example WgWxqztrNooG92RXvxSTWv
     */
    did?: string;
    /**
     * Format: url
     * @description Optional image URL for connection invitation
     * @example http://192.168.56.101/img/logo.jpg
     */
    imageUrl?: string;
    /**
     * @description Optional label for connection invitation
     * @example Bob
     */
    label?: string;
    /** @description List of recipient keys */
    recipientKeys?: string[];
    /** @description List of routing keys */
    routingKeys?: string[];
    /**
     * @description Service endpoint at which to reach this agent
     * @example http://192.168.56.101:8020
     */
    serviceEndpoint?: string;
  };
  ConnectionList: {
    /** @description List of connection records */
    results?: definitions["ConnRecord"][];
  };
  ConnectionMetadata: {
    /** @description Dictionary of metadata associated with connection. */
    results?: { [key: string]: unknown };
  };
  ConnectionMetadataSetRequest: {
    /** @description Dictionary of metadata to set for connection. */
    metadata: { [key: string]: unknown };
  };
  ConnectionModuleResponse: { [key: string]: unknown };
  ConnectionStaticRequest: {
    /** @description Alias to assign to this connection */
    alias?: string;
    /**
     * @description Local DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    my_did?: string;
    /** @description Seed to use for the local DID */
    my_seed?: string;
    /**
     * @description Remote DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    their_did?: string;
    /**
     * @description URL endpoint for other party
     * @example https://myhost:8021
     */
    their_endpoint?: string;
    /** @description Other party's label for this connection */
    their_label?: string;
    /** @description Seed to use for the remote DID */
    their_seed?: string;
    /** @description Remote verification key */
    their_verkey?: string;
  };
  ConnectionStaticResult: {
    /**
     * @description My verification key
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    mv_verkey: string;
    /**
     * @description Local DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    my_did: string;
    /**
     * @description My URL endpoint
     * @example https://myhost:8021
     */
    my_endpoint: string;
    record: definitions["ConnRecord"];
    /**
     * @description Remote DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    their_did: string;
    /**
     * @description Remote verification key
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    their_verkey: string;
  };
  Constraints: {
    fields?: definitions["DIFField"][];
    is_holder?: definitions["DIFHolder"][];
    /** @description LimitDisclosure */
    limit_disclosure?: string;
    /** @enum {string} */
    status_active?: "required" | "allowed" | "disallowed";
    /** @enum {string} */
    status_revoked?: "required" | "allowed" | "disallowed";
    /** @enum {string} */
    status_suspended?: "required" | "allowed" | "disallowed";
    /**
     * @description SubjectIsIssuer
     * @enum {string}
     */
    subject_is_issuer?: "required" | "preferred";
  };
  CreateInvitationRequest: {
    /**
     * @description Identifier for active mediation record to be used
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    mediation_id?: string;
    /** @description Optional metadata to attach to the connection created with the invitation */
    metadata?: { [key: string]: unknown };
    /**
     * @description Optional label for connection invitation
     * @example Bob
     */
    my_label?: string;
    /** @description List of recipient keys */
    recipient_keys?: string[];
    /** @description List of routing keys */
    routing_keys?: string[];
    /**
     * @description Connection endpoint
     * @example http://192.168.56.102:8020
     */
    service_endpoint?: string;
  };
  CreateWalletRequest: {
    /**
     * @description Image url for this wallet. This image url is publicized            (self-attested) to other agents as part of forming a connection.
     * @example https://aries.ca/images/sample.png
     */
    image_url?: string;
    /**
     * @description Key management method to use for this wallet.
     * @example managed
     * @enum {string}
     */
    key_management_mode?: "managed";
    /**
     * @description Label for this wallet. This label is publicized            (self-attested) to other agents as part of forming a connection.
     * @example Alice
     */
    label?: string;
    /**
     * @description Webhook target dispatch type for this wallet.             default - Dispatch only to webhooks associated with this wallet.             base - Dispatch only to webhooks associated with the base wallet.             both - Dispatch to both webhook targets.
     * @example default
     * @enum {string}
     */
    wallet_dispatch_type?: "default" | "both" | "base";
    /**
     * @description Master key used for key derivation.
     * @example MySecretKey123
     */
    wallet_key?: string;
    /**
     * @description Wallet name
     * @example MyNewWallet
     */
    wallet_name?: string;
    /**
     * @description Type of the wallet to create
     * @example indy
     * @enum {string}
     */
    wallet_type?: "askar" | "in_memory" | "indy";
    /** @description List of Webhook URLs associated with this subwallet */
    wallet_webhook_urls?: string[];
  };
  CreateWalletResponse: {
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    /**
     * @description Mode regarding management of wallet key
     * @enum {string}
     */
    key_management_mode: "managed" | "unmanaged";
    /** @description Settings for this wallet. */
    settings?: { [key: string]: unknown };
    /**
     * @description Current record state
     * @example active
     */
    state?: string;
    /**
     * @description Authorization token to authenticate wallet requests
     * @example eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
     */
    token?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
    /**
     * @description Wallet record ID
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    wallet_id: string;
  };
  CreateWalletTokenRequest: {
    /**
     * @description Master key used for key derivation. Only required for             unamanged wallets.
     * @example MySecretKey123
     */
    wallet_key?: string;
  };
  CreateWalletTokenResponse: {
    /**
     * @description Authorization token to authenticate wallet requests
     * @example eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
     */
    token?: string;
  };
  CredAttrSpec: {
    /**
     * @description MIME type: omit for (null) default
     * @example image/jpeg
     */
    "mime-type"?: string;
    /**
     * @description Attribute name
     * @example favourite_drink
     */
    name: string;
    /**
     * @description Attribute value: base64-encode if MIME type is present
     * @example martini
     */
    value: string;
  };
  CredDefValue: {
    primary?: definitions["CredDefValue_primary"];
    revocation?: definitions["CredDefValue_revocation"];
  };
  CredDefValuePrimary: {
    /** @example 0 */
    n?: string;
    r?: definitions["Generated"];
    /** @example 0 */
    rctxt?: string;
    /** @example 0 */
    s?: string;
    /** @example 0 */
    z?: string;
  };
  CredDefValueRevocation: {
    /** @example 1 1F14F&ECB578F 2 095E45DDF417D */
    g?: string;
    /** @example 1 1D64716fCDC00C 1 0C781960FA66E3D3 2 095E45DDF417D */
    g_dash?: string;
    /** @example 1 16675DAE54BFAE8 2 095E45DD417D */
    h?: string;
    /** @example 1 21E5EF9476EAF18 2 095E45DDF417D */
    h0?: string;
    /** @example 1 236D1D99236090 2 095E45DDF417D */
    h1?: string;
    /** @example 1 1C3AE8D1F1E277 2 095E45DDF417D */
    h2?: string;
    /** @example 1 1B2A32CF3167 1 2490FEBF6EE55 1 0000000000000000 */
    h_cap?: string;
    /** @example 1 1D8549E8C0F8 2 095E45DDF417D */
    htilde?: string;
    /** @example 1 142CD5E5A7DC 1 153885BD903312 2 095E45DDF417D */
    pk?: string;
    /** @example 1 0C430AAB2B4710 1 1CB3A0932EE7E 1 0000000000000000 */
    u?: string;
    /** @example 1 153558BD903312 2 095E45DDF417D 1 0000000000000000 */
    y?: string;
  };
  CredInfoList: {
    results?: definitions["IndyCredInfo"][];
  };
  CredRevRecordResult: {
    result?: definitions["IssuerCredRevRecord"];
  };
  CredRevokedResult: {
    /** @description Whether credential is revoked on the ledger */
    revoked?: boolean;
  };
  Credential: {
    /**
     * @description The JSON-LD context of the credential
     * @example https://www.w3.org/2018/credentials/v1,https://www.w3.org/2018/credentials/examples/v1
     */
    "@context": unknown[];
    credentialSubject: unknown;
    /**
     * @description The expiration date
     * @example 2010-01-01T19:23:24Z
     */
    expirationDate?: string;
    /** @example http://example.edu/credentials/1872 */
    id?: string;
    /**
     * @description The issuance date
     * @example 2010-01-01T19:23:24Z
     */
    issuanceDate: string;
    /**
     * @description The JSON-LD Verifiable Credential Issuer. Either string of object with id field.
     * @example did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH
     */
    issuer: unknown;
    proof?: definitions["Credential_proof"];
    /**
     * @description The JSON-LD type of the credential
     * @example VerifiableCredential,AlumniCredential
     */
    type: string[];
  };
  CredentialDefinition: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    id?: string;
    /**
     * @description Schema identifier within credential definition identifier
     * @example 20
     */
    schemaId?: string;
    /**
     * @description Tag within credential definition identifier
     * @example tag
     */
    tag?: string;
    /**
     * @description Signature type: CL for Camenisch-Lysyanskaya
     * @example CL
     */
    type?: unknown;
    value?: definitions["CredentialDefinition_value"];
    /**
     * @description Node protocol version
     * @example 1.0
     */
    ver?: string;
  };
  CredentialDefinitionGetResult: {
    credential_definition?: definitions["CredentialDefinition"];
  };
  CredentialDefinitionSendRequest: {
    /**
     * Format: int32
     * @description Revocation registry size
     * @example 1000
     */
    revocation_registry_size?: number;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    schema_id?: string;
    /** @description Revocation supported flag */
    support_revocation?: boolean;
    /**
     * @description Credential definition identifier tag
     * @example default
     */
    tag?: string;
  };
  CredentialDefinitionSendResult: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    credential_definition_id?: string;
  };
  CredentialDefinitionsCreatedResult: {
    credential_definition_ids?: string[];
  };
  CredentialOffer: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /** @description Human-readable comment */
    comment?: string;
    credential_preview?: definitions["CredentialPreview"];
    "offers~attach": definitions["AttachDecorator"][];
  };
  CredentialPreview: {
    /**
     * @description Message type identifier
     * @example issue-credential/1.0/credential-preview
     */
    "@type"?: string;
    attributes: definitions["CredAttrSpec"][];
  };
  CredentialProposal: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /** @description Human-readable comment */
    comment?: string;
    /** @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag */
    cred_def_id?: string;
    credential_proposal?: definitions["CredentialPreview"];
    /** @example WgWxqztrNooG92RXvxSTWv */
    issuer_did?: string;
    /** @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0 */
    schema_id?: string;
    /** @example WgWxqztrNooG92RXvxSTWv */
    schema_issuer_did?: string;
    schema_name?: string;
    /** @example 1.0 */
    schema_version?: string;
  };
  CredentialStatusOptions: {
    /**
     * @description Credential status method type to use for the credential. Should match status method registered in the Verifiable Credential Extension Registry
     * @example CredentialStatusList2017
     */
    type: string;
  };
  DID: {
    /**
     * @description DID of interest
     * @example WgWxqztrNooG92RXvxSTWv
     */
    did?: string;
    /**
     * @description Key type associated with the DID
     * @example ed25519
     * @enum {string}
     */
    key_type?: "ed25519" | "bls12381g2";
    /**
     * @description Did method associated with the DID
     * @example sov
     * @enum {string}
     */
    method?: "sov" | "key";
    /**
     * @description Whether DID is current public DID, posted to ledger but not current public DID, or local to the wallet
     * @example wallet_only
     * @enum {string}
     */
    posture?: "public" | "posted" | "wallet_only";
    /**
     * @description Public verification key
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    verkey?: string;
  };
  DIDCreate: {
    /**
     * @example sov
     * @enum {string}
     */
    method?: "key" | "sov";
    options?: definitions["DIDCreate_options"];
  };
  DIDCreateOptions: {
    /**
     * @example ed25519
     * @enum {string}
     */
    key_type: "ed25519" | "bls12381g2";
  };
  DIDEndpoint: {
    /**
     * @description DID of interest
     * @example WgWxqztrNooG92RXvxSTWv
     */
    did: string;
    /**
     * @description Endpoint to set (omit to delete)
     * @example https://myhost:8021
     */
    endpoint?: string;
  };
  DIDEndpointWithType: {
    /**
     * @description DID of interest
     * @example WgWxqztrNooG92RXvxSTWv
     */
    did: string;
    /**
     * @description Endpoint to set (omit to delete)
     * @example https://myhost:8021
     */
    endpoint?: string;
    /**
     * @description Endpoint type to set (default 'Endpoint'); affects only public or posted DIDs
     * @example Endpoint
     * @enum {string}
     */
    endpoint_type?: "Endpoint" | "Profile" | "LinkedDomains";
  };
  DIDList: {
    /** @description DID list */
    results?: definitions["DID"][];
  };
  DIDResult: {
    result?: definitions["DID"];
  };
  DIDXRequest: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /**
     * @description DID of exchange
     * @example WgWxqztrNooG92RXvxSTWv
     */
    did?: string;
    "did_doc~attach"?: definitions["DIDXRequest_did_docattach"];
    /**
     * @description Label for DID exchange request
     * @example Request to connect with Bob
     */
    label: string;
  };
  DIFField: {
    filter?: definitions["Filter"];
    /** @description ID */
    id?: string;
    path?: string[];
    /**
     * @description Preference
     * @enum {string}
     */
    predicate?: "required" | "preferred";
    /** @description Purpose */
    purpose?: string;
  };
  DIFHolder: {
    /**
     * @description Preference
     * @enum {string}
     */
    directive?: "required" | "preferred";
    field_id?: string[];
  };
  DIFOptions: {
    /**
     * @description Challenge protect against replay attack
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    challenge?: string;
    /**
     * @description Domain protect against replay attack
     * @example 4jt78h47fh47
     */
    domain?: string;
  };
  DIFPresSpec: {
    /** @description Issuer identifier to sign the presentation, if different from current public DID */
    issuer_id?: string;
    presentation_definition?: definitions["PresentationDefinition"];
    /**
     * @description Mapping of input_descriptor id to list of stored W3C credential record_id
     * @example [object Object]
     */
    record_ids?: { [key: string]: unknown };
    /**
     * @description reveal doc [JSON-LD frame] dict used to derive the credential when selective disclosure is required
     * @example [object Object]
     */
    reveal_doc?: { [key: string]: unknown };
  };
  DIFProofProposal: {
    input_descriptors?: definitions["InputDescriptors"][];
  };
  DIFProofRequest: {
    options?: definitions["DIFOptions"];
    presentation_definition: definitions["PresentationDefinition"];
  };
  Date: {
    /**
     * Format: date-time
     * @description Expiry Date
     * @example 2021-03-29T05:22:19Z
     */
    expires_time: string;
  };
  Doc: {
    /** @description Credential to sign */
    credential: { [key: string]: unknown };
    options: definitions["Doc_options"];
  };
  EndorserInfo: {
    /** @description Endorser DID */
    endorser_did: string;
    /** @description Endorser Name */
    endorser_name?: string;
  };
  EndpointsResult: {
    /**
     * @description My endpoint
     * @example https://myhost:8021
     */
    my_endpoint?: string;
    /**
     * @description Their endpoint
     * @example https://myhost:8021
     */
    their_endpoint?: string;
  };
  Filter: {
    /** @description Const */
    const?: unknown;
    enum?: unknown[];
    /** @description ExclusiveMaximum */
    exclusiveMaximum?: unknown;
    /** @description ExclusiveMinimum */
    exclusiveMinimum?: unknown;
    /** @description Format */
    format?: string;
    /**
     * Format: int32
     * @description Max Length
     * @example 1234
     */
    maxLength?: number;
    /** @description Maximum */
    maximum?: unknown;
    /**
     * Format: int32
     * @description Min Length
     * @example 1234
     */
    minLength?: number;
    /** @description Minimum */
    minimum?: unknown;
    /** @description Not */
    not?: boolean;
    /** @description Pattern */
    pattern?: string;
    /** @description Type */
    type?: string;
  };
  Generated: {
    /** @example 0 */
    master_secret?: string;
    /** @example 0 */
    number?: string;
    /** @example 0 */
    remainder?: string;
  };
  GetDIDEndpointResponse: {
    /**
     * @description Full verification key
     * @example https://myhost:8021
     */
    endpoint?: string;
  };
  GetDIDVerkeyResponse: {
    /**
     * @description Full verification key
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    verkey?: string;
  };
  GetNymRoleResponse: {
    /**
     * @description Ledger role
     * @example ENDORSER
     * @enum {string}
     */
    role?:
      | "STEWARD"
      | "TRUSTEE"
      | "ENDORSER"
      | "NETWORK_MONITOR"
      | "USER"
      | "ROLE_REMOVE";
  };
  HolderModuleResponse: { [key: string]: unknown };
  IndyAttrValue: {
    /**
     * @description Attribute encoded value
     * @example 0
     */
    encoded: string;
    /** @description Attribute raw value */
    raw: string;
  };
  IndyCredAbstract: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id: string;
    key_correctness_proof: definitions["IndyCredAbstract_key_correctness_proof"];
    /**
     * @description Nonce in credential abstract
     * @example 0
     */
    nonce: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    schema_id: string;
  };
  IndyCredInfo: {
    /** @description Attribute names and value */
    attrs?: { [key: string]: string };
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id?: string;
    /**
     * @description Credential revocation identifier
     * @example 12345
     */
    cred_rev_id?: string;
    /**
     * @description Wallet referent
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    referent?: string;
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    rev_reg_id?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    schema_id?: string;
  };
  IndyCredPrecis: {
    cred_info?: definitions["IndyCredPrecis_cred_info"];
    interval?: definitions["IndyCredPrecis_interval"];
    presentation_referents?: string[];
  };
  IndyCredRequest: {
    /** @description Blinded master secret */
    blinded_ms: { [key: string]: unknown };
    /** @description Blinded master secret correctness proof */
    blinded_ms_correctness_proof: { [key: string]: unknown };
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id: string;
    /**
     * @description Nonce in credential request
     * @example 0
     */
    nonce: string;
    /**
     * @description Prover DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    prover_did?: string;
  };
  IndyCredential: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id: string;
    /** @description Revocation registry state */
    rev_reg?: { [key: string]: unknown };
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    rev_reg_id?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    schema_id: string;
    /** @description Credential signature */
    signature: { [key: string]: unknown };
    /** @description Credential signature correctness proof */
    signature_correctness_proof: { [key: string]: unknown };
    /** @description Credential attributes */
    values: { [key: string]: definitions["IndyAttrValue"] };
    /** @description Witness for revocation proof */
    witness?: { [key: string]: unknown };
  };
  IndyEQProof: {
    /** @example 0 */
    a_prime?: string;
    /** @example 0 */
    e?: string;
    m?: { [key: string]: string };
    /** @example 0 */
    m2?: string;
    revealed_attrs?: { [key: string]: string };
    /** @example 0 */
    v?: string;
  };
  IndyGEProof: {
    /** @example 0 */
    alpha?: string;
    /** @example 0 */
    mj?: string;
    predicate?: definitions["IndyGEProofPred"];
    r?: { [key: string]: string };
    t?: { [key: string]: string };
    u?: { [key: string]: string };
  };
  IndyGEProofPred: {
    /** @description Attribute name, indy-canonicalized */
    attr_name?: string;
    /**
     * @description Predicate type
     * @enum {string}
     */
    p_type?: "LT" | "LE" | "GE" | "GT";
    /**
     * Format: int32
     * @description Predicate threshold value
     */
    value?: number;
  };
  IndyKeyCorrectnessProof: {
    /**
     * @description c in key correctness proof
     * @example 0
     */
    c: string;
    /** @description xr_cap in key correctness proof */
    xr_cap: string[][];
    /**
     * @description xz_cap in key correctness proof
     * @example 0
     */
    xz_cap: string;
  };
  IndyNonRevocProof: {
    c_list?: { [key: string]: string };
    x_list?: { [key: string]: string };
  };
  IndyNonRevocationInterval: {
    /**
     * Format: int32
     * @description Earliest time of interest in non-revocation interval
     * @example 1640995199
     */
    from?: number;
    /**
     * Format: int32
     * @description Latest time of interest in non-revocation interval
     * @example 1640995199
     */
    to?: number;
  };
  IndyPresAttrSpec: {
    /** @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag */
    cred_def_id?: string;
    /**
     * @description MIME type (default null)
     * @example image/jpeg
     */
    "mime-type"?: string;
    /**
     * @description Attribute name
     * @example favourite_drink
     */
    name: string;
    /**
     * @description Credential referent
     * @example 0
     */
    referent?: string;
    /**
     * @description Attribute value
     * @example martini
     */
    value?: string;
  };
  IndyPresPredSpec: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id?: string;
    /**
     * @description Attribute name
     * @example high_score
     */
    name: string;
    /**
     * @description Predicate type ('<', '<=', '>=', or '>')
     * @example >=
     * @enum {string}
     */
    predicate: "<" | "<=" | ">=" | ">";
    /**
     * Format: int32
     * @description Threshold value
     */
    threshold: number;
  };
  IndyPresPreview: {
    /**
     * @description Message type identifier
     * @example did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/present-proof/1.0/presentation-preview
     */
    "@type"?: string;
    attributes: definitions["IndyPresAttrSpec"][];
    predicates: definitions["IndyPresPredSpec"][];
  };
  IndyPresSpec: {
    /** @description Nested object mapping proof request attribute referents to requested-attribute specifiers */
    requested_attributes: {
      [key: string]: definitions["IndyRequestedCredsRequestedAttr"];
    };
    /** @description Nested object mapping proof request predicate referents to requested-predicate specifiers */
    requested_predicates: {
      [key: string]: definitions["IndyRequestedCredsRequestedPred"];
    };
    /** @description Self-attested attributes to build into proof */
    self_attested_attributes: { [key: string]: string };
    /** @description Whether to trace event (default false) */
    trace?: boolean;
  };
  IndyPrimaryProof: {
    eq_proof?: definitions["IndyPrimaryProof_eq_proof"];
    /** @description Indy GE proofs */
    ge_proofs?: definitions["IndyGEProof"][];
  };
  IndyProof: {
    /** @description Indy proof.identifiers content */
    identifiers?: definitions["IndyProofIdentifier"][];
    proof?: definitions["IndyProof_proof"];
    requested_proof?: definitions["IndyProof_requested_proof"];
  };
  IndyProofIdentifier: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id?: string;
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    rev_reg_id?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    schema_id?: string;
    /**
     * Format: int32
     * @description Timestamp epoch
     * @example 1640995199
     */
    timestamp?: number;
  };
  IndyProofProof: {
    aggregated_proof?: definitions["IndyProofProof_aggregated_proof"];
    /** @description Indy proof proofs */
    proofs?: definitions["IndyProofProofProofsProof"][];
  };
  IndyProofProofAggregatedProof: {
    /** @description c_hash value */
    c_hash?: string;
    /** @description c_list value */
    c_list?: number[][];
  };
  IndyProofProofProofsProof: {
    non_revoc_proof?: definitions["IndyProofProofProofsProof_non_revoc_proof"];
    primary_proof?: definitions["IndyProofProofProofsProof_primary_proof"];
  };
  IndyProofReqAttrSpec: {
    /**
     * @description Attribute name
     * @example favouriteDrink
     */
    name?: string;
    /** @description Attribute name group */
    names?: string[];
    non_revoked?: definitions["IndyProofReqAttrSpec_non_revoked"];
    /** @description If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name */
    restrictions?: { [key: string]: string }[];
  };
  IndyProofReqAttrSpecNonRevoked: {
    /**
     * Format: int32
     * @description Earliest time of interest in non-revocation interval
     * @example 1640995199
     */
    from?: number;
    /**
     * Format: int32
     * @description Latest time of interest in non-revocation interval
     * @example 1640995199
     */
    to?: number;
  };
  IndyProofReqPredSpec: {
    /**
     * @description Attribute name
     * @example index
     */
    name: string;
    non_revoked?: definitions["IndyProofReqAttrSpec_non_revoked"];
    /**
     * @description Predicate type ('<', '<=', '>=', or '>')
     * @example >=
     * @enum {string}
     */
    p_type: "<" | "<=" | ">=" | ">";
    /**
     * Format: int32
     * @description Threshold value
     */
    p_value: number;
    /** @description If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name */
    restrictions?: { [key: string]: string }[];
  };
  IndyProofReqPredSpecNonRevoked: {
    /**
     * Format: int32
     * @description Earliest time of interest in non-revocation interval
     * @example 1640995199
     */
    from?: number;
    /**
     * Format: int32
     * @description Latest time of interest in non-revocation interval
     * @example 1640995199
     */
    to?: number;
  };
  IndyProofRequest: {
    /**
     * @description Proof request name
     * @example Proof request
     */
    name?: string;
    non_revoked?: definitions["IndyProofReqAttrSpec_non_revoked"];
    /**
     * @description Nonce
     * @example 1
     */
    nonce?: string;
    /** @description Requested attribute specifications of proof request */
    requested_attributes?: {
      [key: string]: definitions["IndyProofReqAttrSpec"];
    };
    /** @description Requested predicate specifications of proof request */
    requested_predicates?: {
      [key: string]: definitions["IndyProofReqPredSpec"];
    };
    /**
     * @description Proof request version
     * @example 1.0
     */
    version?: string;
  };
  IndyProofRequestNonRevoked: {
    /**
     * Format: int32
     * @description Earliest time of interest in non-revocation interval
     * @example 1640995199
     */
    from?: number;
    /**
     * Format: int32
     * @description Latest time of interest in non-revocation interval
     * @example 1640995199
     */
    to?: number;
  };
  IndyProofRequestedProof: {
    /** @description Proof requested proof predicates. */
    predicates?: {
      [key: string]: definitions["IndyProofRequestedProofPredicate"];
    };
    /** @description Proof requested proof revealed attribute groups */
    revealed_attr_groups?: {
      [key: string]: definitions["IndyProofRequestedProofRevealedAttrGroup"];
    };
    /** @description Proof requested proof revealed attributes */
    revealed_attrs?: {
      [key: string]: definitions["IndyProofRequestedProofRevealedAttr"];
    };
    /** @description Proof requested proof self-attested attributes */
    self_attested_attrs?: { [key: string]: unknown };
    /** @description Unrevealed attributes */
    unrevealed_attrs?: { [key: string]: unknown };
  };
  IndyProofRequestedProofPredicate: {
    /**
     * Format: int32
     * @description Sub-proof index
     */
    sub_proof_index?: number;
  };
  IndyProofRequestedProofRevealedAttr: {
    /**
     * @description Encoded value
     * @example 0
     */
    encoded?: string;
    /** @description Raw value */
    raw?: string;
    /**
     * Format: int32
     * @description Sub-proof index
     */
    sub_proof_index?: number;
  };
  IndyProofRequestedProofRevealedAttrGroup: {
    /**
     * Format: int32
     * @description Sub-proof index
     */
    sub_proof_index?: number;
    /** @description Indy proof requested proof revealed attr groups group value */
    values?: { [key: string]: definitions["RawEncoded"] };
  };
  IndyRequestedCredsRequestedAttr: {
    /**
     * @description Wallet credential identifier (typically but not necessarily a UUID)
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    cred_id: string;
    /** @description Whether to reveal attribute in proof (default true) */
    revealed?: boolean;
  };
  IndyRequestedCredsRequestedPred: {
    /**
     * @description Wallet credential identifier (typically but not necessarily a UUID)
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    cred_id: string;
    /**
     * Format: int32
     * @description Epoch timestamp of interest for non-revocation proof
     * @example 1640995199
     */
    timestamp?: number;
  };
  IndyRevRegDef: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    credDefId?: string;
    /**
     * @description Indy revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    id?: string;
    /**
     * @description Revocation registry type (specify CL_ACCUM)
     * @example CL_ACCUM
     * @enum {string}
     */
    revocDefType?: "CL_ACCUM";
    /** @description Revocation registry tag */
    tag?: string;
    value?: definitions["IndyRevRegDef_value"];
    /**
     * @description Version of revocation registry definition
     * @example 1.0
     */
    ver?: string;
  };
  IndyRevRegDefValue: {
    /**
     * @description Issuance type
     * @enum {string}
     */
    issuanceType?: "ISSUANCE_ON_DEMAND" | "ISSUANCE_BY_DEFAULT";
    /**
     * Format: int32
     * @description Maximum number of credentials; registry size
     * @example 10
     */
    maxCredNum?: number;
    publicKeys?: definitions["IndyRevRegDefValue_publicKeys"];
    /**
     * @description Tails hash value
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    tailsHash?: string;
    /** @description Tails file location */
    tailsLocation?: string;
  };
  IndyRevRegDefValuePublicKeys: {
    accumKey?: definitions["IndyRevRegDefValuePublicKeysAccumKey"];
  };
  IndyRevRegDefValuePublicKeysAccumKey: {
    /**
     * @description Value for z
     * @example 1 120F522F81E6B7 1 09F7A59005C4939854
     */
    z?: string;
  };
  IndyRevRegEntry: {
    value?: definitions["IndyRevRegEntry_value"];
    /**
     * @description Version of revocation registry entry
     * @example 1.0
     */
    ver?: string;
  };
  IndyRevRegEntryValue: {
    /**
     * @description Accumulator value
     * @example 21 11792B036AED0AAA12A4 4 298B2571FFC63A737
     */
    accum?: string;
    /**
     * @description Previous accumulator value
     * @example 21 137AC810975E4 6 76F0384B6F23
     */
    prevAccum?: string;
    /** @description Revoked credential revocation identifiers */
    revoked?: number[];
  };
  InputDescriptors: {
    constraints?: definitions["Constraints"];
    group?: string[];
    /** @description ID */
    id?: string;
    /** @description Metadata dictionary */
    metadata?: { [key: string]: unknown };
    /** @description Name */
    name?: string;
    /** @description Purpose */
    purpose?: string;
  };
  IntroModuleResponse: { [key: string]: unknown };
  InvitationCreateRequest: {
    /**
     * @description Alias for connection
     * @example Barry
     */
    alias?: string;
    /** @description Optional invitation attachments */
    attachments?: definitions["AttachmentDef"][];
    handshake_protocols?: string[];
    /**
     * @description Identifier for active mediation record to be used
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    mediation_id?: string;
    /** @description Optional metadata to attach to the connection created with the invitation */
    metadata?: { [key: string]: unknown };
    /**
     * @description Label for connection invitation
     * @example Invitation to Barry
     */
    my_label?: string;
    /** @description Whether to use public DID in invitation */
    use_public_did?: boolean;
  };
  InvitationMessage: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    handshake_protocols?: string[];
    /**
     * @description Optional label
     * @example Bob
     */
    label?: string;
    /** @description Optional request attachment */
    "requests~attach"?: definitions["AttachDecorator"][];
    /** @example [object Object],did:sov:WgWxqztrNooG92RXvxSTWv */
    services?: unknown[];
  };
  InvitationRecord: {
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    /**
     * @description Invitation message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    invi_msg_id?: string;
    invitation?: definitions["InvitationRecord_invitation"];
    /**
     * @description Invitation record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    invitation_id?: string;
    /**
     * @description Invitation message URL
     * @example https://example.com/endpoint?c_i=eyJAdHlwZSI6ICIuLi4iLCAiLi4uIjogIi4uLiJ9XX0=
     */
    invitation_url?: string;
    /**
     * @description Out of band message exchange state
     * @example await_response
     */
    state?: string;
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
  };
  InvitationResult: {
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id?: string;
    invitation?: definitions["ConnectionInvitation"];
    /**
     * @description Invitation URL
     * @example http://192.168.56.101:8020/invite?c_i=eyJAdHlwZSI6Li4ufQ==
     */
    invitation_url?: string;
  };
  IssueCredentialModuleResponse: { [key: string]: unknown };
  IssuerCredRevRecord: {
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id?: string;
    /**
     * @description Credential exchange record identifier at credential issue
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    cred_ex_id?: string;
    /**
     * @description Credential revocation identifier
     * @example 12345
     */
    cred_rev_id?: string;
    /**
     * @description Issuer credential revocation record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    record_id?: string;
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    rev_reg_id?: string;
    /**
     * @description Issue credential revocation record state
     * @example issued
     */
    state?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
  };
  IssuerRevRegRecord: {
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id?: string;
    /**
     * @description Error message
     * @example Revocation registry undefined
     */
    error_msg?: string;
    /**
     * @description Issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    issuer_did?: string;
    /**
     * Format: int32
     * @description Maximum number of credentials for revocation registry
     * @example 1000
     */
    max_cred_num?: number;
    /** @description Credential revocation identifier for credential revoked and pending publication to ledger */
    pending_pub?: string[];
    /**
     * @description Issuer revocation registry record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    record_id?: string;
    /**
     * @description Revocation registry type (specify CL_ACCUM)
     * @example CL_ACCUM
     * @enum {string}
     */
    revoc_def_type?: "CL_ACCUM";
    revoc_reg_def?: definitions["IssuerRevRegRecord_revoc_reg_def"];
    revoc_reg_entry?: definitions["IssuerRevRegRecord_revoc_reg_entry"];
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    revoc_reg_id?: string;
    /**
     * @description Issue revocation registry record state
     * @example active
     */
    state?: string;
    /** @description Tag within issuer revocation registry identifier */
    tag?: string;
    /**
     * @description Tails hash
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    tails_hash?: string;
    /** @description Local path to tails file */
    tails_local_path?: string;
    /** @description Public URI for tails file */
    tails_public_uri?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
  };
  Keylist: {
    /** @description List of keylist records */
    results?: definitions["RouteRecord"][];
  };
  KeylistQuery: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /**
     * @description Query dictionary object
     * @example [object Object]
     */
    filter?: { [key: string]: unknown };
    paginate?: definitions["KeylistQuery_paginate"];
  };
  KeylistQueryFilterRequest: {
    /** @description Filter for keylist query */
    filter?: { [key: string]: unknown };
  };
  KeylistQueryPaginate: {
    /**
     * Format: int32
     * @description Limit for keylist query
     * @example 30
     */
    limit?: number;
    /**
     * Format: int32
     * @description Offset value for query
     */
    offset?: number;
  };
  KeylistUpdate: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /** @description List of update rules */
    updates?: definitions["KeylistUpdateRule"][];
  };
  KeylistUpdateRequest: {
    updates?: definitions["KeylistUpdateRule"][];
  };
  KeylistUpdateRule: {
    /**
     * @description Action for specific key
     * @example add
     * @enum {string}
     */
    action: "add" | "remove";
    /**
     * @description Key to remove or add
     * @example H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
     */
    recipient_key: string;
  };
  LDProofVCDetail: {
    credential: definitions["LDProofVCDetail_credential"];
    options: definitions["LDProofVCDetail_options"];
  };
  LDProofVCDetailOptions: {
    /**
     * @description A challenge to include in the proof. SHOULD be provided by the requesting party of the credential (=holder)
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    challenge?: string;
    /**
     * @description The date and time of the proof (with a maximum accuracy in seconds). Defaults to current system time
     * @example 2021-12-31 23:59:59Z
     */
    created?: string;
    credentialStatus?: definitions["LDProofVCDetailOptions_credentialStatus"];
    /**
     * @description The intended domain of validity for the proof
     * @example example.com
     */
    domain?: string;
    /**
     * @description The proof purpose used for the proof. Should match proof purposes registered in the Linked Data Proofs Specification
     * @example assertionMethod
     */
    proofPurpose?: string;
    /**
     * @description The proof type used for the proof. Should match suites registered in the Linked Data Cryptographic Suite Registry
     * @example Ed25519Signature2018
     */
    proofType: string;
  };
  LedgerModulesResult: { [key: string]: unknown };
  LinkedDataProof: {
    /**
     * @description Associates a challenge with a proof, for use with a proofPurpose such as authentication
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    challenge?: string;
    /**
     * @description The string value of an ISO8601 combined date and time string generated by the Signature Algorithm
     * @example 2021-12-31 23:59:59Z
     */
    created: string;
    /**
     * @description A string value specifying the restricted domain of the signature.
     * @example example.com
     */
    domain?: string;
    /**
     * @description Associates a Detached Json Web Signature with a proof
     * @example eyJhbGciOiAiRWREUc2UsICJjcml0IjogWyJiNjQiXX0..lKJU0Df_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQ1Ch6YBKY7UBAjg6iBX5qBQ
     */
    jws?: string;
    /**
     * @description The nonce
     * @example CF69iO3nfvqRsRBNElE8b4wO39SyJHPM7Gg1nExltW5vSfQA1lvDCR/zXX1To0/4NLo==
     */
    nonce?: string;
    /**
     * @description Proof purpose
     * @example assertionMethod
     */
    proofPurpose: string;
    /**
     * @description The proof value of a proof
     * @example sy1AahqbzJQ63n9RtekmwzqZeVj494VppdAVJBnMYrTwft6cLJJGeTSSxCCJ6HKnRtwE7jjDh6sB2z2AAiZY9BBnCD8wUVgwqH3qchGRCuC2RugA4eQ9fUrR4Yuycac3caiaaay
     */
    proofValue?: string;
    /**
     * @description Identifies the digital signature suite that was used to create the signature
     * @example Ed25519Signature2018
     */
    type: string;
    /**
     * @description Information used for proof verification
     * @example did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL
     */
    verificationMethod: string;
  };
  MediationCreateRequest: {
    /** @description List of mediator rules for recipient */
    mediator_terms?: string[];
    /** @description List of recipient rules for mediation */
    recipient_terms?: string[];
  };
  MediationDeny: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    mediator_terms?: string[];
    recipient_terms?: string[];
  };
  MediationGrant: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /**
     * @description endpoint on which messages destined for the recipient are received.
     * @example http://192.168.56.102:8020/
     */
    endpoint?: string;
    routing_keys?: string[];
  };
  MediationList: {
    /** @description List of mediation records */
    results?: definitions["MediationRecord"][];
  };
  MediationRecord: {
    connection_id: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    endpoint?: string;
    mediation_id?: string;
    mediator_terms?: string[];
    recipient_terms?: string[];
    role: string;
    routing_keys?: string[];
    /**
     * @description Current record state
     * @example active
     */
    state?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
  };
  Menu: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /**
     * @description Introductory text for the menu
     * @example This menu presents options
     */
    description?: string;
    /**
     * @description An optional error message to display in menu header
     * @example Error: item not found
     */
    errormsg?: string;
    /** @description List of menu options */
    options: definitions["MenuOption"][];
    /**
     * @description Menu title
     * @example My Menu
     */
    title?: string;
  };
  MenuForm: {
    /**
     * @description Additional descriptive text for menu form
     * @example Window preference settings
     */
    description?: string;
    /** @description List of form parameters */
    params?: definitions["MenuFormParam"][];
    /**
     * @description Alternative label for form submit button
     * @example Send
     */
    "submit-label"?: string;
    /**
     * @description Menu form title
     * @example Preferences
     */
    title?: string;
  };
  MenuFormParam: {
    /**
     * @description Default parameter value
     * @example 0
     */
    default?: string;
    /**
     * @description Additional descriptive text for menu form parameter
     * @example Delay in seconds before starting
     */
    description?: string;
    /**
     * @description Menu parameter name
     * @example delay
     */
    name: string;
    /** @description Whether parameter is required */
    required?: boolean;
    /**
     * @description Menu parameter title
     * @example Delay in seconds
     */
    title: string;
    /**
     * @description Menu form parameter input type
     * @example int
     */
    type?: string;
  };
  MenuJson: {
    /**
     * @description Introductory text for the menu
     * @example User preferences for window settings
     */
    description?: string;
    /**
     * @description Optional error message to display in menu header
     * @example Error: item not present
     */
    errormsg?: string;
    /** @description List of menu options */
    options: definitions["MenuOption"][];
    /**
     * @description Menu title
     * @example My Menu
     */
    title?: string;
  };
  MenuOption: {
    /**
     * @description Additional descriptive text for menu option
     * @example Window display preferences
     */
    description?: string;
    /** @description Whether to show option as disabled */
    disabled?: boolean;
    form?: definitions["MenuForm"];
    /**
     * @description Menu option name (unique identifier)
     * @example window_prefs
     */
    name: string;
    /**
     * @description Menu option title
     * @example Window Preferences
     */
    title: string;
  };
  MultitenantModuleResponse: { [key: string]: unknown };
  PerformRequest: {
    /**
     * @description Menu option name
     * @example Query
     */
    name?: string;
    /** @description Input parameter values */
    params?: { [key: string]: string };
  };
  PingRequest: {
    /** @description Comment for the ping message */
    comment?: string;
  };
  PingRequestResponse: {
    /** @description Thread ID of the ping message */
    thread_id?: string;
  };
  PresentationDefinition: {
    format?: definitions["ClaimFormat"];
    /**
     * @description Unique Resource Identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    id?: string;
    input_descriptors?: definitions["InputDescriptors"][];
    /** @description Human-friendly name that describes what the presentation definition pertains to */
    name?: string;
    /** @description Describes the purpose for which the Presentation Definition's inputs are being requested */
    purpose?: string;
    submission_requirements?: definitions["SubmissionRequirements"][];
  };
  PresentationProposal: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /** @description Human-readable comment */
    comment?: string;
    presentation_proposal: definitions["IndyPresPreview"];
  };
  PresentationRequest: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /** @description Human-readable comment */
    comment?: string;
    "request_presentations~attach": definitions["AttachDecorator"][];
  };
  PublishRevocations: {
    /** @description Credential revocation ids by revocation registry id */
    rrid2crid?: { [key: string]: string[] };
  };
  QueryResult: {
    /** @description Query results keyed by protocol */
    results?: { [key: string]: { [key: string]: unknown } };
  };
  RawEncoded: {
    /**
     * @description Encoded value
     * @example 0
     */
    encoded?: string;
    /** @description Raw value */
    raw?: string;
  };
  ReceiveInvitationRequest: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /**
     * @description DID for connection invitation
     * @example WgWxqztrNooG92RXvxSTWv
     */
    did?: string;
    /**
     * Format: url
     * @description Optional image URL for connection invitation
     * @example http://192.168.56.101/img/logo.jpg
     */
    imageUrl?: string;
    /**
     * @description Optional label for connection invitation
     * @example Bob
     */
    label?: string;
    /** @description List of recipient keys */
    recipientKeys?: string[];
    /** @description List of routing keys */
    routingKeys?: string[];
    /**
     * @description Service endpoint at which to reach this agent
     * @example http://192.168.56.101:8020
     */
    serviceEndpoint?: string;
  };
  RegisterLedgerNymResponse: {
    /**
     * @description Success of nym registration operation
     * @example true
     */
    success?: boolean;
  };
  RemoveWalletRequest: {
    /**
     * @description Master key used for key derivation. Only required for             unmanaged wallets.
     * @example MySecretKey123
     */
    wallet_key?: string;
  };
  ResolutionResult: {
    /** @description DID Document */
    did_doc: { [key: string]: unknown };
    /** @description Resolution metadata */
    metadata: { [key: string]: unknown };
  };
  RevRegCreateRequest: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    credential_definition_id?: string;
    /**
     * Format: int32
     * @description Revocation registry size
     * @example 1000
     */
    max_cred_num?: number;
  };
  RevRegIssuedResult: {
    /**
     * Format: int32
     * @description Number of credentials issued against revocation registry
     */
    result?: number;
  };
  RevRegResult: {
    result?: definitions["IssuerRevRegRecord"];
  };
  RevRegUpdateTailsFileUri: {
    /**
     * Format: url
     * @description Public URI to the tails file
     * @example http://192.168.56.133:6543/revocation/registry/WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0/tails-file
     */
    tails_public_uri: string;
  };
  RevRegsCreated: {
    rev_reg_ids?: string[];
  };
  RevocationModuleResponse: { [key: string]: unknown };
  RevokeRequest: {
    /**
     * @description Credential exchange identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    cred_ex_id?: string;
    /**
     * @description Credential revocation identifier
     * @example 12345
     */
    cred_rev_id?: string;
    /** @description (True) publish revocation to ledger immediately, or (default, False) mark it pending */
    publish?: boolean;
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    rev_reg_id?: string;
  };
  RouteRecord: {
    connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    recipient_key: string;
    record_id?: string;
    role?: string;
    /**
     * @description Current record state
     * @example active
     */
    state?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
    wallet_id?: string;
  };
  Schema: {
    /** @description Schema attribute names */
    attrNames?: string[];
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    id?: string;
    /**
     * @description Schema name
     * @example schema_name
     */
    name?: string;
    /**
     * Format: int32
     * @description Schema sequence number
     * @example 10
     */
    seqNo?: number;
    /**
     * @description Node protocol version
     * @example 1.0
     */
    ver?: string;
    /**
     * @description Schema version
     * @example 1.0
     */
    version?: string;
  };
  SchemaGetResult: {
    schema?: definitions["Schema"];
  };
  SchemaInputDescriptor: {
    /** @description Required */
    required?: boolean;
    /** @description URI */
    uri?: string;
  };
  SchemaSendRequest: {
    /** @description List of schema attributes */
    attributes: string[];
    /**
     * @description Schema name
     * @example prefs
     */
    schema_name: string;
    /**
     * @description Schema version
     * @example 1.0
     */
    schema_version: string;
  };
  SchemaSendResult: {
    schema?: definitions["SchemaSendResult_schema"];
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    schema_id: string;
  };
  SchemasCreatedResult: {
    schema_ids?: string[];
  };
  SendMenu: {
    menu: definitions["SendMenu_menu"];
  };
  SendMessage: {
    /**
     * @description Message content
     * @example Hello
     */
    content?: string;
  };
  SignRequest: {
    doc: definitions["Doc"];
    /** @description Verkey to use for signing */
    verkey: string;
  };
  SignResponse: {
    /** @description Error text */
    error?: string;
    /** @description Signed document */
    signed_doc?: { [key: string]: unknown };
  };
  SignatureOptions: {
    challenge?: string;
    domain?: string;
    proofPurpose: string;
    type?: string;
    verificationMethod: string;
  };
  SignedDoc: {
    proof: definitions["SignedDoc_proof"];
  };
  SubmissionRequirements: {
    /**
     * Format: int32
     * @description Count Value
     * @example 1234
     */
    count?: number;
    /** @description From */
    from?: string;
    from_nested?: definitions["SubmissionRequirements"][];
    /**
     * Format: int32
     * @description Max Value
     * @example 1234
     */
    max?: number;
    /**
     * Format: int32
     * @description Min Value
     * @example 1234
     */
    min?: number;
    /** @description Name */
    name?: string;
    /** @description Purpose */
    purpose?: string;
    /**
     * @description Selection
     * @enum {string}
     */
    rule?: "all" | "pick";
  };
  TAAAccept: {
    mechanism?: string;
    text?: string;
    version?: string;
  };
  TAAAcceptance: {
    mechanism?: string;
    /**
     * Format: int32
     * @example 1640995199
     */
    time?: number;
  };
  TAAInfo: {
    aml_record?: definitions["AMLRecord"];
    taa_accepted?: definitions["TAAAcceptance"];
    taa_record?: definitions["TAARecord"];
    taa_required?: boolean;
  };
  TAARecord: {
    digest?: string;
    text?: string;
    version?: string;
  };
  TAAResult: {
    result?: definitions["TAAInfo"];
  };
  TransactionJobs: {
    /**
     * @description My transaction related job
     * @enum {string}
     */
    transaction_my_job?:
      | "TRANSACTION_AUTHOR"
      | "TRANSACTION_ENDORSER"
      | "reset";
    /**
     * @description Their transaction related job
     * @enum {string}
     */
    transaction_their_job?:
      | "TRANSACTION_AUTHOR"
      | "TRANSACTION_ENDORSER"
      | "reset";
  };
  TransactionList: {
    /** @description List of transaction records */
    results?: definitions["TransactionRecord"][];
  };
  TransactionRecord: {
    /**
     * @description Transaction type
     * @example 101
     */
    _type?: string;
    /**
     * @description The connection identifier for thie particular transaction record
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    /**
     * @description If True, Endorser will write the transaction after endorsing it
     * @example true
     */
    endorser_write_txn?: boolean;
    formats?: { [key: string]: string }[];
    messages_attach?: { [key: string]: unknown }[];
    signature_request?: { [key: string]: unknown }[];
    signature_response?: { [key: string]: unknown }[];
    /**
     * @description Current record state
     * @example active
     */
    state?: string;
    /**
     * @description Thread Identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    thread_id?: string;
    /** @example [object Object] */
    timing?: { [key: string]: unknown };
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
    /**
     * @description Transaction identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    transaction_id?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
  };
  TxnOrCredentialDefinitionSendResult: {
    sent?: definitions["CredentialDefinitionSendResult"];
    txn?: definitions["TxnOrCredentialDefinitionSendResult_txn"];
  };
  TxnOrPublishRevocationsResult: {
    sent?: definitions["PublishRevocations"];
    txn?: definitions["TxnOrPublishRevocationsResult_txn"];
  };
  TxnOrRevRegResult: {
    sent?: definitions["RevRegResult"];
    txn?: definitions["TxnOrRevRegResult_txn"];
  };
  TxnOrSchemaSendResult: {
    sent?: definitions["TxnOrSchemaSendResult_sent"];
    txn?: definitions["TxnOrSchemaSendResult_txn"];
  };
  UpdateWalletRequest: {
    /**
     * @description Image url for this wallet. This image url is publicized            (self-attested) to other agents as part of forming a connection.
     * @example https://aries.ca/images/sample.png
     */
    image_url?: string;
    /**
     * @description Label for this wallet. This label is publicized            (self-attested) to other agents as part of forming a connection.
     * @example Alice
     */
    label?: string;
    /**
     * @description Webhook target dispatch type for this wallet.             default - Dispatch only to webhooks associated with this wallet.             base - Dispatch only to webhooks associated with the base wallet.             both - Dispatch to both webhook targets.
     * @example default
     * @enum {string}
     */
    wallet_dispatch_type?: "default" | "both" | "base";
    /** @description List of Webhook URLs associated with this subwallet */
    wallet_webhook_urls?: string[];
  };
  V10CredentialBoundOfferRequest: {
    counter_proposal?: definitions["V10CredentialBoundOfferRequest_counter_proposal"];
  };
  V10CredentialConnFreeOfferRequest: {
    /** @description Whether to respond automatically to credential requests, creating and issuing requested credentials */
    auto_issue?: boolean;
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    auto_remove?: boolean;
    /** @description Human-readable comment */
    comment?: string;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id: string;
    credential_preview: definitions["CredentialPreview"];
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
  };
  V10CredentialCreate: {
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    auto_remove?: boolean;
    /** @description Human-readable comment */
    comment?: string;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id?: string;
    credential_proposal: definitions["CredentialPreview"];
    /**
     * @description Credential issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    issuer_did?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    schema_id?: string;
    /**
     * @description Schema issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    schema_issuer_did?: string;
    /**
     * @description Schema name
     * @example preferences
     */
    schema_name?: string;
    /**
     * @description Schema version
     * @example 1.0
     */
    schema_version?: string;
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
  };
  V10CredentialExchange: {
    /** @description Issuer choice to issue to request in this credential exchange */
    auto_issue?: boolean;
    /** @description Holder choice to accept offer in this credential exchange */
    auto_offer?: boolean;
    /** @description Issuer choice to remove this credential exchange record when complete */
    auto_remove?: boolean;
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    credential?: definitions["V10CredentialExchange_credential"];
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    credential_definition_id?: string;
    /**
     * @description Credential exchange identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    credential_exchange_id?: string;
    /**
     * @description Credential identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    credential_id?: string;
    credential_offer?: definitions["V10CredentialExchange_credential_offer"];
    credential_offer_dict?: definitions["V10CredentialExchange_credential_offer_dict"];
    credential_proposal_dict?: definitions["V10CredentialExchange_credential_proposal_dict"];
    credential_request?: definitions["V10CredentialExchange_credential_request"];
    /** @description (Indy) credential request metadata */
    credential_request_metadata?: { [key: string]: unknown };
    /**
     * @description Error message
     * @example Credential definition identifier is not set in proposal
     */
    error_msg?: string;
    /**
     * @description Issue-credential exchange initiator: self or external
     * @example self
     * @enum {string}
     */
    initiator?: "self" | "external";
    /**
     * @description Parent thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    parent_thread_id?: string;
    raw_credential?: definitions["V10CredentialExchange_raw_credential"];
    /** @description Revocation registry identifier */
    revoc_reg_id?: string;
    /** @description Credential identifier within revocation registry */
    revocation_id?: string;
    /**
     * @description Issue-credential exchange role: holder or issuer
     * @example issuer
     * @enum {string}
     */
    role?: "holder" | "issuer";
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    schema_id?: string;
    /**
     * @description Issue-credential exchange state
     * @example credential_acked
     */
    state?: string;
    /**
     * @description Thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    thread_id?: string;
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
  };
  V10CredentialExchangeListResult: {
    /** @description Aries#0036 v1.0 credential exchange records */
    results?: definitions["V10CredentialExchange"][];
  };
  V10CredentialFreeOfferRequest: {
    /** @description Whether to respond automatically to credential requests, creating and issuing requested credentials */
    auto_issue?: boolean;
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    auto_remove?: boolean;
    /** @description Human-readable comment */
    comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id: string;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id: string;
    credential_preview: definitions["CredentialPreview"];
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
  };
  V10CredentialIssueRequest: {
    /** @description Human-readable comment */
    comment?: string;
  };
  V10CredentialProblemReportRequest: {
    description: string;
  };
  V10CredentialProposalRequestMand: {
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    auto_remove?: boolean;
    /** @description Human-readable comment */
    comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id: string;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id?: string;
    credential_proposal: definitions["CredentialPreview"];
    /**
     * @description Credential issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    issuer_did?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    schema_id?: string;
    /**
     * @description Schema issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    schema_issuer_did?: string;
    /**
     * @description Schema name
     * @example preferences
     */
    schema_name?: string;
    /**
     * @description Schema version
     * @example 1.0
     */
    schema_version?: string;
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
  };
  V10CredentialProposalRequestOpt: {
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    auto_remove?: boolean;
    /** @description Human-readable comment */
    comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id: string;
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id?: string;
    credential_proposal?: definitions["CredentialPreview"];
    /**
     * @description Credential issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    issuer_did?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    schema_id?: string;
    /**
     * @description Schema issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    schema_issuer_did?: string;
    /**
     * @description Schema name
     * @example preferences
     */
    schema_name?: string;
    /**
     * @description Schema version
     * @example 1.0
     */
    schema_version?: string;
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
  };
  V10CredentialStoreRequest: {
    credential_id?: string;
  };
  V10PresentProofModuleResponse: { [key: string]: unknown };
  V10PresentationCreateRequestRequest: {
    comment?: string;
    proof_request: definitions["IndyProofRequest"];
    /** @description Whether to trace event (default false) */
    trace?: boolean;
  };
  V10PresentationExchange: {
    /** @description Prover choice to auto-present proof as verifier requests */
    auto_present?: boolean;
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    /**
     * @description Error message
     * @example Invalid structure
     */
    error_msg?: string;
    /**
     * @description Present-proof exchange initiator: self or external
     * @example self
     * @enum {string}
     */
    initiator?: "self" | "external";
    presentation?: definitions["V10PresentationExchange_presentation"];
    /**
     * @description Presentation exchange identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    presentation_exchange_id?: string;
    presentation_proposal_dict?: definitions["V10PresentationExchange_presentation_proposal_dict"];
    presentation_request?: definitions["V10PresentationExchange_presentation_request"];
    presentation_request_dict?: definitions["V10PresentationExchange_presentation_request_dict"];
    /**
     * @description Present-proof exchange role: prover or verifier
     * @example prover
     * @enum {string}
     */
    role?: "prover" | "verifier";
    /**
     * @description Present-proof exchange state
     * @example verified
     */
    state?: string;
    /**
     * @description Thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    thread_id?: string;
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
    /**
     * @description Whether presentation is verified: true or false
     * @example true
     * @enum {string}
     */
    verified?: "true" | "false";
  };
  V10PresentationExchangeList: {
    /** @description Aries RFC 37 v1.0 presentation exchange records */
    results?: definitions["V10PresentationExchange"][];
  };
  V10PresentationProblemReportRequest: {
    description: string;
  };
  V10PresentationProposalRequest: {
    /** @description Whether to respond automatically to presentation requests, building and presenting requested proof */
    auto_present?: boolean;
    /** @description Human-readable comment */
    comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id: string;
    presentation_proposal: definitions["IndyPresPreview"];
    /** @description Whether to trace event (default false) */
    trace?: boolean;
  };
  V10PresentationSendRequestRequest: {
    comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id: string;
    proof_request: definitions["IndyProofRequest"];
    /** @description Whether to trace event (default false) */
    trace?: boolean;
  };
  V20CredAttrSpec: {
    /**
     * @description MIME type: omit for (null) default
     * @example image/jpeg
     */
    "mime-type"?: string;
    /**
     * @description Attribute name
     * @example favourite_drink
     */
    name: string;
    /**
     * @description Attribute value: base64-encode if MIME type is present
     * @example martini
     */
    value: string;
  };
  V20CredBoundOfferRequest: {
    counter_preview?: definitions["V20CredBoundOfferRequest_counter_preview"];
    filter?: definitions["V20CredBoundOfferRequest_filter"];
  };
  V20CredExFree: {
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    auto_remove?: boolean;
    /** @description Human-readable comment */
    comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id: string;
    credential_preview?: definitions["V20CredPreview"];
    filter: definitions["V20CredBoundOfferRequest_filter"];
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
  };
  V20CredExRecord: {
    /** @description Issuer choice to issue to request in this credential exchange */
    auto_issue?: boolean;
    /** @description Holder choice to accept offer in this credential exchange */
    auto_offer?: boolean;
    /** @description Issuer choice to remove this credential exchange record when complete */
    auto_remove?: boolean;
    by_format?: definitions["V20CredExRecord_by_format"];
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    /**
     * @description Credential exchange identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    cred_ex_id?: string;
    cred_issue?: definitions["V20CredExRecord_cred_issue"];
    cred_offer?: definitions["V10CredentialExchange_credential_offer_dict"];
    cred_preview?: definitions["V20CredExRecord_cred_preview"];
    cred_proposal?: definitions["V10CredentialExchange_credential_proposal_dict"];
    cred_request?: definitions["V20CredExRecord_cred_request"];
    /**
     * @description Error message
     * @example The front fell off
     */
    error_msg?: string;
    /**
     * @description Issue-credential exchange initiator: self or external
     * @example self
     * @enum {string}
     */
    initiator?: "self" | "external";
    /**
     * @description Parent thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    parent_thread_id?: string;
    /**
     * @description Issue-credential exchange role: holder or issuer
     * @example issuer
     * @enum {string}
     */
    role?: "issuer" | "holder";
    /**
     * @description Issue-credential exchange state
     * @example done
     * @enum {string}
     */
    state?:
      | "proposal-sent"
      | "proposal-received"
      | "offer-sent"
      | "offer-received"
      | "request-sent"
      | "request-received"
      | "credential-issued"
      | "credential-received"
      | "done";
    /**
     * @description Thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    thread_id?: string;
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
  };
  V20CredExRecordByFormat: {
    cred_issue?: { [key: string]: unknown };
    cred_offer?: { [key: string]: unknown };
    cred_proposal?: { [key: string]: unknown };
    cred_request?: { [key: string]: unknown };
  };
  V20CredExRecordDetail: {
    cred_ex_record?: definitions["V20CredExRecordDetail_cred_ex_record"];
    indy?: definitions["V20CredExRecordIndy"];
    ld_proof?: definitions["V20CredExRecordLDProof"];
  };
  V20CredExRecordIndy: {
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    /**
     * @description Corresponding v2.0 credential exchange record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    cred_ex_id?: string;
    /**
     * @description Record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    cred_ex_indy_id?: string;
    /**
     * @description Credential identifier stored in wallet
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    cred_id_stored?: string;
    /** @description Credential request metadata for indy holder */
    cred_request_metadata?: { [key: string]: unknown };
    /**
     * @description Credential revocation identifier within revocation registry
     * @example 12345
     */
    cred_rev_id?: string;
    /**
     * @description Revocation registry identifier
     * @example WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0
     */
    rev_reg_id?: string;
    /**
     * @description Current record state
     * @example active
     */
    state?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
  };
  V20CredExRecordLDProof: {
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    /**
     * @description Corresponding v2.0 credential exchange record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    cred_ex_id?: string;
    /**
     * @description Record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    cred_ex_ld_proof_id?: string;
    /**
     * @description Credential identifier stored in wallet
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    cred_id_stored?: string;
    /**
     * @description Current record state
     * @example active
     */
    state?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
  };
  V20CredExRecordListResult: {
    /** @description Credential exchange records and corresponding detail records */
    results?: definitions["V20CredExRecordDetail"][];
  };
  V20CredFilter: {
    indy?: definitions["V20CredFilter_indy"];
    ld_proof?: definitions["V20CredFilter_ld_proof"];
  };
  V20CredFilterIndy: {
    /**
     * @description Credential definition identifier
     * @example WgWxqztrNooG92RXvxSTWv:3:CL:20:tag
     */
    cred_def_id?: string;
    /**
     * @description Credential issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    issuer_did?: string;
    /**
     * @description Schema identifier
     * @example WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0
     */
    schema_id?: string;
    /**
     * @description Schema issuer DID
     * @example WgWxqztrNooG92RXvxSTWv
     */
    schema_issuer_did?: string;
    /**
     * @description Schema name
     * @example preferences
     */
    schema_name?: string;
    /**
     * @description Schema version
     * @example 1.0
     */
    schema_version?: string;
  };
  V20CredFilterLDProof: {
    ld_proof: definitions["V20CredFilter_ld_proof"];
  };
  V20CredFormat: {
    /**
     * @description Attachment identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    attach_id: string;
    /**
     * @description Attachment format specifier
     * @example aries/ld-proof-vc-detail@v1.0
     */
    format: string;
  };
  V20CredIssue: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /** @description Human-readable comment */
    comment?: string;
    /** @description Credential attachments */
    "credentials~attach": definitions["AttachDecorator"][];
    /** @description Acceptable attachment formats */
    formats: definitions["V20CredFormat"][];
    /**
     * @description Issuer-unique identifier to coordinate credential replacement
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    replacement_id?: string;
  };
  V20CredIssueProblemReportRequest: {
    description: string;
  };
  V20CredIssueRequest: {
    /** @description Human-readable comment */
    comment?: string;
  };
  V20CredOffer: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /** @description Human-readable comment */
    comment?: string;
    credential_preview?: definitions["V20CredPreview"];
    /** @description Acceptable credential formats */
    formats: definitions["V20CredFormat"][];
    /** @description Offer attachments */
    "offers~attach": definitions["AttachDecorator"][];
    /**
     * @description Issuer-unique identifier to coordinate credential replacement
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    replacement_id?: string;
  };
  V20CredOfferConnFreeRequest: {
    /** @description Whether to respond automatically to credential requests, creating and issuing requested credentials */
    auto_issue?: boolean;
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    auto_remove?: boolean;
    /** @description Human-readable comment */
    comment?: string;
    credential_preview?: definitions["V20CredPreview"];
    filter: definitions["V20CredBoundOfferRequest_filter"];
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
  };
  V20CredOfferRequest: {
    /** @description Whether to respond automatically to credential requests, creating and issuing requested credentials */
    auto_issue?: boolean;
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    auto_remove?: boolean;
    /** @description Human-readable comment */
    comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id: string;
    credential_preview?: definitions["V20CredPreview"];
    filter: definitions["V20CredBoundOfferRequest_filter"];
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
  };
  V20CredPreview: {
    /**
     * @description Message type identifier
     * @example issue-credential/2.0/credential-preview
     */
    "@type"?: string;
    attributes: definitions["V20CredAttrSpec"][];
  };
  V20CredProposal: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /** @description Human-readable comment */
    comment?: string;
    credential_preview?: definitions["V20CredProposal_credential_preview"];
    /** @description Credential filter per acceptable format on corresponding identifier */
    "filters~attach": definitions["AttachDecorator"][];
    /** @description Attachment formats */
    formats: definitions["V20CredFormat"][];
  };
  V20CredRequest: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /** @description Human-readable comment */
    comment?: string;
    /** @description Acceptable attachment formats */
    formats: definitions["V20CredFormat"][];
    /** @description Request attachments */
    "requests~attach": definitions["AttachDecorator"][];
  };
  V20CredRequestFree: {
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    auto_remove?: boolean;
    /** @description Human-readable comment */
    comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id: string;
    filter: definitions["V20CredBoundOfferRequest_filter"];
    /**
     * @description Holder DID to substitute for the credentialSubject.id
     * @example did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs
     */
    holder_did?: string;
    /** @description Whether to trace event (default false) */
    trace?: boolean;
  };
  V20CredRequestRequest: {
    /**
     * @description Holder DID to substitute for the credentialSubject.id
     * @example did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs
     */
    holder_did?: string;
  };
  V20CredStoreRequest: {
    credential_id?: string;
  };
  V20IssueCredSchemaCore: {
    /** @description Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting) */
    auto_remove?: boolean;
    /** @description Human-readable comment */
    comment?: string;
    credential_preview?: definitions["V20CredPreview"];
    filter: definitions["V20CredBoundOfferRequest_filter"];
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
  };
  V20IssueCredentialModuleResponse: { [key: string]: unknown };
  V20Pres: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /** @description Human-readable comment */
    comment?: string;
    /** @description Acceptable attachment formats */
    formats: definitions["V20PresFormat"][];
    "presentations~attach": definitions["AttachDecorator"][];
  };
  V20PresCreateRequestRequest: {
    comment?: string;
    presentation_request: definitions["V20PresRequestByFormat"];
    /** @description Whether to trace event (default false) */
    trace?: boolean;
  };
  V20PresExRecord: {
    /** @description Prover choice to auto-present proof as verifier requests */
    auto_present?: boolean;
    by_format?: definitions["V20PresExRecord_by_format"];
    /**
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id?: string;
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    /**
     * @description Error message
     * @example Invalid structure
     */
    error_msg?: string;
    /**
     * @description Present-proof exchange initiator: self or external
     * @example self
     * @enum {string}
     */
    initiator?: "self" | "external";
    pres?: definitions["V20PresExRecord_pres"];
    /**
     * @description Presentation exchange identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    pres_ex_id?: string;
    pres_proposal?: definitions["V10PresentationExchange_presentation_proposal_dict"];
    pres_request?: definitions["V10PresentationExchange_presentation_request_dict"];
    /**
     * @description Present-proof exchange role: prover or verifier
     * @example prover
     * @enum {string}
     */
    role?: "prover" | "verifier";
    /**
     * @description Present-proof exchange state
     * @enum {string}
     */
    state?:
      | "proposal-sent"
      | "proposal-received"
      | "request-sent"
      | "request-received"
      | "presentation-sent"
      | "presentation-received"
      | "done"
      | "abandoned";
    /**
     * @description Thread identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    thread_id?: string;
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
    /**
     * @description Whether presentation is verified: 'true' or 'false'
     * @example true
     * @enum {string}
     */
    verified?: "true" | "false";
  };
  V20PresExRecordByFormat: {
    pres?: { [key: string]: unknown };
    pres_proposal?: { [key: string]: unknown };
    pres_request?: { [key: string]: unknown };
  };
  V20PresExRecordList: {
    /** @description Presentation exchange records */
    results?: definitions["V20PresExRecord"][];
  };
  V20PresFormat: {
    /**
     * @description Attachment identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    attach_id: string;
    /**
     * @description Attachment format specifier
     * @example dif/presentation-exchange/submission@v1.0
     */
    format: string;
  };
  V20PresProblemReportRequest: {
    description: string;
  };
  V20PresProposal: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /** @description Human-readable comment */
    comment?: string;
    formats: definitions["V20PresFormat"][];
    /** @description Attachment per acceptable format on corresponding identifier */
    "proposals~attach": definitions["AttachDecorator"][];
  };
  V20PresProposalByFormat: {
    dif?: definitions["V20PresProposalByFormat_dif"];
    indy?: definitions["V20PresProposalByFormat_indy"];
  };
  V20PresProposalRequest: {
    /** @description Whether to respond automatically to presentation requests, building and presenting requested proof */
    auto_present?: boolean;
    /** @description Human-readable comment */
    comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id: string;
    presentation_proposal: definitions["V20PresProposalByFormat"];
    /** @description Whether to trace event (default false) */
    trace?: boolean;
  };
  V20PresRequest: {
    /**
     * @description Message identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    "@id"?: string;
    /**
     * @description Message type
     * @example https://didcomm.org/my-family/1.0/my-message-type
     */
    "@type"?: string;
    /** @description Human-readable comment */
    comment?: string;
    formats: definitions["V20PresFormat"][];
    /** @description Attachment per acceptable format on corresponding identifier */
    "request_presentations~attach": definitions["AttachDecorator"][];
    /** @description Whether verifier will send confirmation ack */
    will_confirm?: boolean;
  };
  V20PresRequestByFormat: {
    dif?: definitions["V20PresRequestByFormat_dif"];
    indy?: definitions["V20PresRequestByFormat_indy"];
  };
  V20PresSendRequestRequest: {
    comment?: string;
    /**
     * Format: uuid
     * @description Connection identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    connection_id: string;
    presentation_request: definitions["V20PresRequestByFormat"];
    /** @description Whether to trace event (default false) */
    trace?: boolean;
  };
  V20PresSpecByFormatRequest: {
    dif?: definitions["V20PresSpecByFormatRequest_dif"];
    indy?: definitions["V20PresSpecByFormatRequest_indy"];
    /** @description Record trace information, based on agent configuration */
    trace?: boolean;
  };
  V20PresentProofModuleResponse: { [key: string]: unknown };
  VCRecord: {
    contexts?: string[];
    cred_tags?: { [key: string]: string };
    /** @description (JSON-serializable) credential value */
    cred_value?: { [key: string]: unknown };
    expanded_types?: string[];
    /**
     * @description Credential identifier
     * @example http://example.edu/credentials/3732
     */
    given_id?: string;
    /**
     * @description Issuer identifier
     * @example https://example.edu/issuers/14
     */
    issuer_id?: string;
    proof_types?: string[];
    /**
     * @description Record identifier
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    record_id?: string;
    schema_ids?: string[];
    subject_ids?: string[];
  };
  VCRecordList: {
    results?: definitions["VCRecord"][];
  };
  VerifyRequest: {
    doc: definitions["VerifyRequest_doc"];
    /** @description Verkey to use for doc verification */
    verkey?: string;
  };
  VerifyResponse: {
    /** @description Error text */
    error?: string;
    valid: boolean;
  };
  W3CCredentialsListRequest: {
    contexts?: string[];
    /** @description Given credential id to match */
    given_id?: string;
    /** @description Credential issuer identifier to match */
    issuer_id?: string;
    /**
     * Format: int32
     * @description Maximum number of results to return
     */
    max_results?: number;
    proof_types?: string[];
    /** @description Schema identifiers, all of which to match */
    schema_ids?: string[];
    /** @description Subject identifiers, all of which to match */
    subject_ids?: string[];
    /** @description Tag filter */
    tag_query?: { [key: string]: string };
    types?: string[];
  };
  WalletList: {
    /** @description List of wallet records */
    results?: definitions["WalletRecord"][];
  };
  WalletModuleResponse: { [key: string]: unknown };
  WalletRecord: {
    /**
     * @description Time of record creation
     * @example 2021-12-31 23:59:59Z
     */
    created_at?: string;
    /**
     * @description Mode regarding management of wallet key
     * @enum {string}
     */
    key_management_mode: "managed" | "unmanaged";
    /** @description Settings for this wallet. */
    settings?: { [key: string]: unknown };
    /**
     * @description Current record state
     * @example active
     */
    state?: string;
    /**
     * @description Time of last record update
     * @example 2021-12-31 23:59:59Z
     */
    updated_at?: string;
    /**
     * @description Wallet record ID
     * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
     */
    wallet_id: string;
  };
  /** @description Action menu */
  ActionMenuFetchResult_result: { [key: string]: unknown };
  /** @description Detached Java Web Signature */
  AttachDecoratorData_jws: { [key: string]: unknown };
  /** @description Primary value for credential definition */
  CredDefValue_primary: { [key: string]: unknown };
  /** @description Revocation value for credential definition */
  CredDefValue_revocation: { [key: string]: unknown };
  /**
   * @description The proof of the credential
   * @example {"created":"2019-12-11T03:50:55","jws":"eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0JiNjQiXX0..lKJU0Df_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQKBhQDxvXNo7nvtUBb_Eq1Ch6YBKY5qBQ","proofPurpose":"assertionMethod","type":"Ed25519Signature2018","verificationMethod":"did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL"}
   */
  Credential_proof: { [key: string]: unknown };
  /** @description Credential definition primary and revocation values */
  CredentialDefinition_value: { [key: string]: unknown };
  /** @description To define a key type for a did:key */
  DIDCreate_options: { [key: string]: unknown };
  /** @description As signed attachment, DID Doc associated with DID */
  DIDXRequest_did_docattach: { [key: string]: unknown };
  /** @description Signature options */
  Doc_options: { [key: string]: unknown };
  /** @description Key correctness proof */
  IndyCredAbstract_key_correctness_proof: { [key: string]: unknown };
  /** @description Credential info */
  IndyCredPrecis_cred_info: { [key: string]: unknown };
  /** @description Non-revocation interval from presentation request */
  IndyCredPrecis_interval: { [key: string]: unknown };
  /** @description Indy equality proof */
  IndyPrimaryProof_eq_proof: { [key: string]: unknown };
  /** @description Indy proof.proof content */
  IndyProof_proof: { [key: string]: unknown };
  /** @description Indy proof.requested_proof content */
  IndyProof_requested_proof: { [key: string]: unknown };
  /** @description Indy proof aggregated proof */
  IndyProofProof_aggregated_proof: { [key: string]: unknown };
  /** @description Indy non-revocation proof */
  IndyProofProofProofsProof_non_revoc_proof: { [key: string]: unknown };
  /** @description Indy primary proof */
  IndyProofProofProofsProof_primary_proof: { [key: string]: unknown };
  IndyProofReqAttrSpec_non_revoked: { [key: string]: unknown };
  /** @description Revocation registry definition value */
  IndyRevRegDef_value: { [key: string]: unknown };
  /** @description Public keys */
  IndyRevRegDefValue_publicKeys: { [key: string]: unknown };
  /** @description Revocation registry entry value */
  IndyRevRegEntry_value: { [key: string]: unknown };
  /** @description Out of band invitation message */
  InvitationRecord_invitation: { [key: string]: unknown };
  /** @description Revocation registry definition */
  IssuerRevRegRecord_revoc_reg_def: { [key: string]: unknown };
  /** @description Revocation registry entry */
  IssuerRevRegRecord_revoc_reg_entry: { [key: string]: unknown };
  /** @description Pagination info */
  KeylistQuery_paginate: { [key: string]: unknown };
  /**
   * @description Detail of the JSON-LD Credential to be issued
   * @example {"@context":["https://www.w3.org/2018/credentials/v1","https://w3id.org/citizenship/v1"],"credentialSubject":{"familyName":"SMITH","gender":"Male","givenName":"JOHN","type":["PermanentResident","Person"]},"description":"Government of Example Permanent Resident Card.","identifier":"83627465","issuanceDate":"2019-12-03T12:19:52Z","issuer":"did:key:z6MkmjY8GnV5i9YTDtPETC2uUAW6ejw3nk5mXF5yci5ab7th","name":"Permanent Resident Card","type":["VerifiableCredential","PermanentResidentCard"]}
   */
  LDProofVCDetail_credential: { [key: string]: unknown };
  /**
   * @description Options for specifying how the linked data proof is created.
   * @example {"proofType":"Ed25519Signature2018"}
   */
  LDProofVCDetail_options: { [key: string]: unknown };
  /** @description The credential status mechanism to use for the credential. Omitting the property indicates the issued credential will not include a credential status */
  LDProofVCDetailOptions_credentialStatus: { [key: string]: unknown };
  /** @description Schema definition */
  SchemaSendResult_schema: { [key: string]: unknown };
  /** @description Menu to send to connection */
  SendMenu_menu: { [key: string]: unknown };
  /** @description Linked data proof */
  SignedDoc_proof: { [key: string]: unknown };
  /** @description Credential definition transaction to endorse */
  TxnOrCredentialDefinitionSendResult_txn: { [key: string]: unknown };
  /** @description Revocation registry revocations transaction to endorse */
  TxnOrPublishRevocationsResult_txn: { [key: string]: unknown };
  /** @description Revocation registry definition transaction to endorse */
  TxnOrRevRegResult_txn: { [key: string]: unknown };
  /** @description Content sent */
  TxnOrSchemaSendResult_sent: { [key: string]: unknown };
  /** @description Schema transaction to endorse */
  TxnOrSchemaSendResult_txn: { [key: string]: unknown };
  /** @description Optional counter-proposal */
  V10CredentialBoundOfferRequest_counter_proposal: { [key: string]: unknown };
  /** @description Credential as stored */
  V10CredentialExchange_credential: { [key: string]: unknown };
  /** @description (Indy) credential offer */
  V10CredentialExchange_credential_offer: { [key: string]: unknown };
  /** @description Credential offer message */
  V10CredentialExchange_credential_offer_dict: { [key: string]: unknown };
  /** @description Credential proposal message */
  V10CredentialExchange_credential_proposal_dict: { [key: string]: unknown };
  /** @description (Indy) credential request */
  V10CredentialExchange_credential_request: { [key: string]: unknown };
  /** @description Credential as received, prior to storage in holder wallet */
  V10CredentialExchange_raw_credential: { [key: string]: unknown };
  /** @description (Indy) presentation (also known as proof) */
  V10PresentationExchange_presentation: { [key: string]: unknown };
  /** @description Presentation proposal message */
  V10PresentationExchange_presentation_proposal_dict: {
    [key: string]: unknown;
  };
  /** @description (Indy) presentation request (also known as proof request) */
  V10PresentationExchange_presentation_request: { [key: string]: unknown };
  /** @description Presentation request message */
  V10PresentationExchange_presentation_request_dict: { [key: string]: unknown };
  /** @description Optional content for counter-proposal */
  V20CredBoundOfferRequest_counter_preview: { [key: string]: unknown };
  /** @description Credential specification criteria by format */
  V20CredBoundOfferRequest_filter: { [key: string]: unknown };
  /** @description Attachment content by format for proposal, offer, request, and issue */
  V20CredExRecord_by_format: { [key: string]: unknown };
  /** @description Serialized credential issue message */
  V20CredExRecord_cred_issue: { [key: string]: unknown };
  /** @description Credential preview from credential proposal */
  V20CredExRecord_cred_preview: { [key: string]: unknown };
  /** @description Serialized credential request message */
  V20CredExRecord_cred_request: { [key: string]: unknown };
  /** @description Credential exchange record */
  V20CredExRecordDetail_cred_ex_record: { [key: string]: unknown };
  /** @description Credential filter for indy */
  V20CredFilter_indy: { [key: string]: unknown };
  /** @description Credential filter for linked data proof */
  V20CredFilter_ld_proof: { [key: string]: unknown };
  /** @description Credential preview */
  V20CredProposal_credential_preview: { [key: string]: unknown };
  /** @description Attachment content by format for proposal, request, and presentation */
  V20PresExRecord_by_format: { [key: string]: unknown };
  /** @description Presentation message */
  V20PresExRecord_pres: { [key: string]: unknown };
  /** @description Presentation proposal for DIF */
  V20PresProposalByFormat_dif: { [key: string]: unknown };
  /** @description Presentation proposal for indy */
  V20PresProposalByFormat_indy: { [key: string]: unknown };
  /** @description Presentation request for DIF */
  V20PresRequestByFormat_dif: { [key: string]: unknown };
  /** @description Presentation request for indy */
  V20PresRequestByFormat_indy: { [key: string]: unknown };
  /** @description Optional Presentation specification for DIF, overrides the PresentionExchange record's PresRequest */
  V20PresSpecByFormatRequest_dif: { [key: string]: unknown };
  /** @description Presentation specification for indy */
  V20PresSpecByFormatRequest_indy: { [key: string]: unknown };
  /** @description Signed document */
  VerifyRequest_doc: { [key: string]: unknown };
}

export interface operations {}

export interface external {}
